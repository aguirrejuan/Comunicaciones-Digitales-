2020-05-18 09:30:19,492 [3816] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-18 09:30:19,492 [3816] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-18 09:30:19,493 [3816] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-18 09:30:19,500 [3816] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-18 09:30:19,501 [3816] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-18 09:30:19,502 [3816] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-25 13:24:18,668 [9415] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-25 13:24:18,688 [9415] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-25 13:24:18,688 [9415] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-25 13:24:18,696 [9415] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-25 13:24:18,697 [9415] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-25 13:24:18,697 [9415] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-25 13:25:06,114 [9415] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 13:25:06,115 [9415] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 2; new: 1
2020-05-25 13:25:06,115 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2020-05-25 13:25:06,118 [9415] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2020-05-25 13:25:06,118 [9415] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 13:25:06,537 [9415] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 13:25:06,537 [9415] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 1
2020-05-25 13:25:06,537 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2020-05-25 13:25:06,537 [9415] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2020-05-25 13:25:06,538 [9415] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 13:25:07,585 [9415] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 13:25:07,585 [9415] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 1
2020-05-25 13:25:07,586 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2020-05-25 13:25:07,587 [9415] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2020-05-25 13:25:07,587 [9415] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 13:25:11,398 [9415] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 13:25:11,398 [9415] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 1
2020-05-25 13:25:11,399 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2020-05-25 13:25:11,400 [9415] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2020-05-25 13:25:11,401 [9415] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 13:25:11,662 [9415] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_util.py
2020-05-25 13:25:13,330 [9415] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 13:25:13,330 [9415] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 1
2020-05-25 13:25:13,331 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2020-05-25 13:25:13,332 [9415] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2020-05-25 13:25:13,332 [9415] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 13:25:22,574 [9415] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 13:25:22,575 [9415] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 1
2020-05-25 13:25:22,606 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2020-05-25 13:25:22,608 [9415] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2020-05-25 13:25:22,608 [9415] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 13:25:36,404 [9415] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 13:25:36,405 [9415] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 1
2020-05-25 13:25:36,406 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2020-05-25 13:25:36,407 [9415] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2020-05-25 13:25:36,407 [9415] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 13:26:03,313 [9415] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 13:26:03,313 [9415] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 1
2020-05-25 13:26:03,314 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2020-05-25 13:26:03,314 [9415] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2020-05-25 13:26:03,314 [9415] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 13:27:38,669 [9415] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 13:27:38,669 [9415] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 2
2020-05-25 13:27:38,669 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2020-05-25 13:27:38,671 [9415] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2020-05-25 13:27:38,671 [9415] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 13:31:16,825 [9415] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 13:31:16,826 [9415] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 2; new: 2
2020-05-25 13:31:16,826 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:2] new[1:2]
2020-05-25 13:31:16,830 [9415] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2020-05-25 13:31:16,831 [9415] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 13:31:19,823 [9415] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 13:31:19,824 [9415] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 2; new: 2
2020-05-25 13:31:19,824 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2020-05-25 13:31:19,825 [9415] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:1] new[1:1]
2020-05-25 13:31:19,826 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2020-05-25 13:31:19,828 [9415] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2020-05-25 13:31:19,828 [9415] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 13:31:20,970 [9415] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 13:31:20,971 [9415] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 2; new: 2
2020-05-25 13:31:20,971 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2020-05-25 13:31:20,972 [9415] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:1] new[1:1]
2020-05-25 13:31:20,972 [9415] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2020-05-25 13:31:20,973 [9415] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2020-05-25 13:31:20,973 [9415] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 14:44:25,598 [2700] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-25 14:44:25,610 [2700] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-25 14:44:25,611 [2700] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-25 14:44:25,619 [2700] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-25 14:44:25,620 [2700] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-25 14:44:25,620 [2700] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-25 14:44:27,927 [2700] DEBUG    matplotlib.colorbar:560: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fd9a892e410>
2020-05-25 14:44:27,927 [2700] DEBUG    matplotlib.colorbar:608: [JupyterRequire] Using auto colorbar locator on colorbar
2020-05-25 14:44:27,927 [2700] DEBUG    matplotlib.colorbar:609: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7fd9a892e410>
2020-05-25 14:44:27,927 [2700] DEBUG    matplotlib.colorbar:780: [JupyterRequire] Setting pcolormesh
2020-05-25 14:58:42,695 [3094] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-25 14:58:42,696 [3094] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-25 14:58:42,696 [3094] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-25 14:58:42,698 [3094] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-25 14:58:42,699 [3094] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-25 14:58:42,699 [3094] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-25 14:59:18,935 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2020-05-25 14:59:19,001 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2020-05-25 14:59:19,386 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 14:59:19,386 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 1
2020-05-25 14:59:19,387 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2020-05-25 14:59:19,388 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2020-05-25 14:59:19,388 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 14:59:19,517 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_modulation.py
2020-05-25 14:59:19,798 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 14:59:19,799 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 1
2020-05-25 14:59:19,799 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2020-05-25 14:59:19,800 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2020-05-25 14:59:19,800 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 14:59:21,103 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 14:59:21,103 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 1
2020-05-25 14:59:21,104 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2020-05-25 14:59:21,104 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2020-05-25 14:59:21,104 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:20:58,684 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:20:58,689 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 2
2020-05-25 15:20:58,689 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2020-05-25 15:20:58,690 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2020-05-25 15:20:58,691 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:20:58,801 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/commpy/__init__.py
2020-05-25 15:21:01,240 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:01,241 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 2; new: 2
2020-05-25 15:21:01,242 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2020-05-25 15:21:01,242 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:1] new[1:1]
2020-05-25 15:21:01,243 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2020-05-25 15:21:01,244 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2020-05-25 15:21:01,244 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:01,432 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/commpy/filters.py
2020-05-25 15:21:01,721 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/__init__.py
2020-05-25 15:21:02,058 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/__init__.py
2020-05-25 15:21:02,118 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/numeric.py
2020-05-25 15:21:02,166 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/umath.py
2020-05-25 15:21:02,249 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/numerictypes.py
2020-05-25 15:21:02,311 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py
2020-05-25 15:21:02,384 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/arrayprint.py
2020-05-25 15:21:02,437 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/_asarray.py
2020-05-25 15:21:02,458 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/_ufunc_config.py
2020-05-25 15:21:02,489 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/records.py
2020-05-25 15:21:02,493 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/memmap.py
2020-05-25 15:21:02,498 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/function_base.py
2020-05-25 15:21:02,503 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/machar.py
2020-05-25 15:21:02,522 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/getlimits.py
2020-05-25 15:21:02,559 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/shape_base.py
2020-05-25 15:21:02,582 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/einsumfunc.py
2020-05-25 15:21:02,606 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/__init__.py
2020-05-25 15:21:02,614 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/type_check.py
2020-05-25 15:21:02,623 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/index_tricks.py
2020-05-25 15:21:02,669 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/function_base.py
2020-05-25 15:21:02,672 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/mixins.py
2020-05-25 15:21:02,689 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/nanfunctions.py
2020-05-25 15:21:02,717 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/shape_base.py
2020-05-25 15:21:02,720 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/stride_tricks.py
2020-05-25 15:21:02,755 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/twodim_base.py
2020-05-25 15:21:02,766 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/ufunclike.py
2020-05-25 15:21:02,834 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/histograms.py
2020-05-25 15:21:02,859 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/polynomial.py
2020-05-25 15:21:02,871 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/utils.py
2020-05-25 15:21:02,877 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/arraysetops.py
2020-05-25 15:21:02,909 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/npyio.py
2020-05-25 15:21:02,915 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/financial.py
2020-05-25 15:21:02,921 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/arraypad.py
2020-05-25 15:21:02,924 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/lib/_version.py
2020-05-25 15:21:02,938 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/matrixlib/__init__.py
2020-05-25 15:21:02,946 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/matrixlib/defmatrix.py
2020-05-25 15:21:03,214 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/types.py
2020-05-25 15:21:03,255 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/3/types.pyi
2020-05-25 15:21:03,334 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/typing.py
2020-05-25 15:21:03,374 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/3/typing.pyi
2020-05-25 15:21:03,438 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/functools.py
2020-05-25 15:21:03,491 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/3/functools.pyi
2020-05-25 15:21:03,686 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:03,687 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 148; new: 155
2020-05-25 15:21:03,687 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[1:0] new[1:8]
2020-05-25 15:21:03,688 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 9 (to 9 in part parser)
2020-05-25 15:21:03,688 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:2] new[9:10]
2020-05-25 15:21:03,688 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 10 to 11 (to 11 in part parser)
2020-05-25 15:21:03,688 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[3:3] new[11:10]
2020-05-25 15:21:03,688 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[4:148] new[11:155]
2020-05-25 15:21:03,689 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[6:147] new[12:154]
2020-05-25 15:21:03,690 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:03,718 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:03,726 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 2424; new: 2412
2020-05-25 15:21:03,726 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:28] new[1:28]
2020-05-25 15:21:03,726 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:28] new[1:28]
2020-05-25 15:21:03,726 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[29:28] new[29:29]
2020-05-25 15:21:03,726 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 29 to 29 (to 29 in part parser)
2020-05-25 15:21:03,726 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[29:48] new[30:49]
2020-05-25 15:21:03,727 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[29:48] new[30:49]
2020-05-25 15:21:03,727 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[49:56] new[50:49]
2020-05-25 15:21:03,727 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[57:68] new[50:61]
2020-05-25 15:21:03,731 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 50 to 68 (to 68 in part parser)
2020-05-25 15:21:03,731 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[69:69] new[62:62]
2020-05-25 15:21:03,731 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[70:301] new[63:294]
2020-05-25 15:21:03,732 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[77:287] new[69:280]
2020-05-25 15:21:03,733 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 281 to 322 (to 322 in part parser)
2020-05-25 15:21:03,733 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[302:302] new[295:295]
2020-05-25 15:21:03,733 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[303:532] new[296:525]
2020-05-25 15:21:03,733 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[330:334] new[323:327]
2020-05-25 15:21:03,733 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[337:469] new[328:462]
2020-05-25 15:21:03,734 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 463 to 529 (to 529 in part parser)
2020-05-25 15:21:03,734 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[533:533] new[526:526]
2020-05-25 15:21:03,734 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[534:555] new[527:548]
2020-05-25 15:21:03,735 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[537:537] new[530:530]
2020-05-25 15:21:03,735 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[540:541] new[531:534]
2020-05-25 15:21:03,736 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 535 to 578 (to 578 in part parser)
2020-05-25 15:21:03,736 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[556:556] new[549:549]
2020-05-25 15:21:03,736 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[557:557] new[550:550]
2020-05-25 15:21:03,736 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[558:557] new[551:552]
2020-05-25 15:21:03,736 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[558:564] new[553:559]
2020-05-25 15:21:03,736 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[565:565] new[560:561]
2020-05-25 15:21:03,736 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[566:582] new[562:578]
2020-05-25 15:21:03,736 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[583:582] new[579:583]
2020-05-25 15:21:03,737 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 579 to 584 (to 584 in part parser)
2020-05-25 15:21:03,738 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[583:939] new[584:940]
2020-05-25 15:21:03,738 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[586:909] new[585:910]
2020-05-25 15:21:03,739 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 911 to 1041 (to 1041 in part parser)
2020-05-25 15:21:03,739 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[940:940] new[941:941]
2020-05-25 15:21:03,739 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[941:960] new[942:961]
2020-05-25 15:21:03,739 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[961:960] new[962:964]
2020-05-25 15:21:03,739 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[961:1782] new[965:1786]
2020-05-25 15:21:03,739 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1038:1099] new[1042:1103]
2020-05-25 15:21:03,740 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1102:1779] new[1104:1783]
2020-05-25 15:21:03,741 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1784 to 1861 (to 1861 in part parser)
2020-05-25 15:21:03,741 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1783:1789] new[1787:1793]
2020-05-25 15:21:03,741 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1790:1794] new[1794:1798]
2020-05-25 15:21:03,741 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1795:1795] new[1799:1799]
2020-05-25 15:21:03,741 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1796:1802] new[1800:1806]
2020-05-25 15:21:03,741 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1803:1806] new[1807:1814]
2020-05-25 15:21:03,741 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1807:1853] new[1815:1861]
2020-05-25 15:21:03,741 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1854:1856] new[1862:1864]
2020-05-25 15:21:03,742 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1862 to 1864 (to 1864 in part parser)
2020-05-25 15:21:03,742 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1857:1936] new[1865:1944]
2020-05-25 15:21:03,742 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1859:1967] new[1865:1938]
2020-05-25 15:21:03,743 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1939 to 1948 (to 1948 in part parser)
2020-05-25 15:21:03,743 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[1937:1936] new[1945:1948]
2020-05-25 15:21:03,744 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1937:2026] new[1949:2038]
2020-05-25 15:21:03,747 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1949 to 1981 (to 1981 in part parser)
2020-05-25 15:21:03,748 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1982 to 2020 (to 2020 in part parser)
2020-05-25 15:21:03,748 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[2009:2024] new[2021:2036]
2020-05-25 15:21:03,749 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 2037 to 2044 (to 2044 in part parser)
2020-05-25 15:21:03,749 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[2027:2050] new[2039:2038]
2020-05-25 15:21:03,749 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[2051:2112] new[2039:2100]
2020-05-25 15:21:03,749 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[2058:2058] new[2045:2046]
2020-05-25 15:21:03,750 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 2047 to 2053 (to 2053 in part parser)
2020-05-25 15:21:03,751 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 2054 to 2082 (to 2082 in part parser)
2020-05-25 15:21:03,751 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[2095:2096] new[2083:2084]
2020-05-25 15:21:03,751 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[2099:2100] new[2085:2088]
2020-05-25 15:21:03,752 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 2089 to 2158 (to 2158 in part parser)
2020-05-25 15:21:03,752 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[2113:2115] new[2101:2103]
2020-05-25 15:21:03,752 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[2116:2424] new[2104:2412]
2020-05-25 15:21:03,753 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[2171:2172] new[2159:2160]
2020-05-25 15:21:03,753 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[2175:2423] new[2161:2411]
2020-05-25 15:21:03,756 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:03,793 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:03,794 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 676; new: 676
2020-05-25 15:21:03,794 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:487] new[1:487]
2020-05-25 15:21:03,794 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:457] new[1:457]
2020-05-25 15:21:03,795 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 458 to 502 (to 502 in part parser)
2020-05-25 15:21:03,795 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[488:488] new[488:488]
2020-05-25 15:21:03,795 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[489:676] new[489:676]
2020-05-25 15:21:03,795 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[503:509] new[503:509]
2020-05-25 15:21:03,795 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[513:675] new[510:670]
2020-05-25 15:21:03,796 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 671 to 675 (to 675 in part parser)
2020-05-25 15:21:03,796 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:03,803 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:03,806 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1646; new: 1623
2020-05-25 15:21:03,806 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:91] new[1:91]
2020-05-25 15:21:03,806 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:95] new[1:85]
2020-05-25 15:21:03,808 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 86 to 97 (to 97 in part parser)
2020-05-25 15:21:03,808 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[92:93] new[92:95]
2020-05-25 15:21:03,808 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[94:111] new[96:113]
2020-05-25 15:21:03,809 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 98 to 251 (to 251 in part parser)
2020-05-25 15:21:03,809 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[112:112] new[114:114]
2020-05-25 15:21:03,810 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[113:116] new[115:118]
2020-05-25 15:21:03,810 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[117:116] new[119:119]
2020-05-25 15:21:03,810 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[117:193] new[120:196]
2020-05-25 15:21:03,810 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[194:194] new[197:197]
2020-05-25 15:21:03,810 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[195:198] new[198:201]
2020-05-25 15:21:03,810 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[199:198] new[202:203]
2020-05-25 15:21:03,810 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[199:235] new[204:240]
2020-05-25 15:21:03,810 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[236:236] new[241:241]
2020-05-25 15:21:03,810 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[237:238] new[242:243]
2020-05-25 15:21:03,810 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[239:238] new[244:250]
2020-05-25 15:21:03,810 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[239:284] new[251:296]
2020-05-25 15:21:03,810 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[240:250] new[252:262]
2020-05-25 15:21:03,811 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 263 to 272 (to 272 in part parser)
2020-05-25 15:21:03,812 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 273 to 299 (to 299 in part parser)
2020-05-25 15:21:03,812 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[285:285] new[297:297]
2020-05-25 15:21:03,812 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[286:983] new[298:995]
2020-05-25 15:21:03,812 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[288:288] new[300:300]
2020-05-25 15:21:03,812 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[291:982] new[301:976]
2020-05-25 15:21:03,814 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 977 to 996 (to 996 in part parser)
2020-05-25 15:21:03,815 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[984:997] new[996:995]
2020-05-25 15:21:03,815 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[998:1195] new[996:1193]
2020-05-25 15:21:03,816 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 997 to 1057 (to 1057 in part parser)
2020-05-25 15:21:03,816 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1060:1065] new[1058:1063]
2020-05-25 15:21:03,816 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1068:1194] new[1064:1192]
2020-05-25 15:21:03,817 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1193 to 1197 (to 1197 in part parser)
2020-05-25 15:21:03,817 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[1196:1210] new[1194:1193]
2020-05-25 15:21:03,817 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1211:1318] new[1194:1301]
2020-05-25 15:21:03,818 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1215:1225] new[1198:1208]
2020-05-25 15:21:03,818 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1227:1229] new[1209:1212]
2020-05-25 15:21:03,819 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1213 to 1220 (to 1220 in part parser)
2020-05-25 15:21:03,820 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1221 to 1233 (to 1233 in part parser)
2020-05-25 15:21:03,820 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1251:1256] new[1234:1239]
2020-05-25 15:21:03,821 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1258:1267] new[1240:1250]
2020-05-25 15:21:03,821 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1270:1318] new[1251:1297]
2020-05-25 15:21:03,822 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1298 to 1303 (to 1303 in part parser)
2020-05-25 15:21:03,822 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[1319:1328] new[1302:1301]
2020-05-25 15:21:03,822 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1329:1508] new[1302:1481]
2020-05-25 15:21:03,822 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1304 to 1309 (to 1309 in part parser)
2020-05-25 15:21:03,823 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1337:1337] new[1310:1310]
2020-05-25 15:21:03,823 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1340:1506] new[1311:1479]
2020-05-25 15:21:03,824 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1480 to 1486 (to 1486 in part parser)
2020-05-25 15:21:03,824 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1509:1509] new[1482:1486]
2020-05-25 15:21:03,824 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1510:1526] new[1487:1503]
2020-05-25 15:21:03,824 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1512:1529] new[1487:1492]
2020-05-25 15:21:03,825 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1493 to 1506 (to 1506 in part parser)
2020-05-25 15:21:03,825 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1527:1527] new[1504:1504]
2020-05-25 15:21:03,825 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1528:1643] new[1505:1620]
2020-05-25 15:21:03,826 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1532:1642] new[1507:1612]
2020-05-25 15:21:03,827 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1613 to 1620 (to 1620 in part parser)
2020-05-25 15:21:03,827 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1644:1645] new[1621:1622]
2020-05-25 15:21:03,827 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1621 to 1622 (to 1622 in part parser)
2020-05-25 15:21:03,827 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1646:1646] new[1623:1623]
2020-05-25 15:21:03,831 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:03,854 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:03,856 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 888; new: 887
2020-05-25 15:21:03,856 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:165] new[1:165]
2020-05-25 15:21:03,856 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:232] new[1:164]
2020-05-25 15:21:03,857 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 165 to 167 (to 167 in part parser)
2020-05-25 15:21:03,857 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[166:166] new[166:166]
2020-05-25 15:21:03,857 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[167:498] new[167:498]
2020-05-25 15:21:03,857 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[169:185] new[168:185]
2020-05-25 15:21:03,857 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[187:232] new[186:232]
2020-05-25 15:21:03,857 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[234:584] new[233:493]
2020-05-25 15:21:03,860 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 494 to 515 (to 515 in part parser)
2020-05-25 15:21:03,860 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[499:500] new[499:499]
2020-05-25 15:21:03,860 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[501:888] new[500:887]
2020-05-25 15:21:03,861 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[518:584] new[516:575]
2020-05-25 15:21:03,862 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 576 to 585 (to 585 in part parser)
2020-05-25 15:21:03,862 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 586 to 599 (to 599 in part parser)
2020-05-25 15:21:03,863 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[602:647] new[600:646]
2020-05-25 15:21:03,863 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[649:887] new[647:842]
2020-05-25 15:21:03,869 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 843 to 886 (to 886 in part parser)
2020-05-25 15:21:03,871 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:03,885 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:03,886 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 471; new: 515
2020-05-25 15:21:03,886 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:5] new[1:5]
2020-05-25 15:21:03,887 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:5] new[1:5]
2020-05-25 15:21:03,887 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[6:5] new[6:6]
2020-05-25 15:21:03,887 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 6 to 6 (to 6 in part parser)
2020-05-25 15:21:03,887 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[6:17] new[7:18]
2020-05-25 15:21:03,887 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[7:17] new[7:18]
2020-05-25 15:21:03,887 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[18:29] new[19:18]
2020-05-25 15:21:03,887 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[30:126] new[19:115]
2020-05-25 15:21:03,887 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[32:179] new[19:115]
2020-05-25 15:21:03,887 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[127:128] new[116:122]
2020-05-25 15:21:03,889 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 116 to 125 (to 125 in part parser)
2020-05-25 15:21:03,889 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[129:147] new[123:141]
2020-05-25 15:21:03,889 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[135:147] new[126:141]
2020-05-25 15:21:03,889 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[148:148] new[142:142]
2020-05-25 15:21:03,891 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 142 to 163 (to 163 in part parser)
2020-05-25 15:21:03,891 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[149:162] new[143:156]
2020-05-25 15:21:03,891 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[163:163] new[157:158]
2020-05-25 15:21:03,891 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[164:432] new[159:427]
2020-05-25 15:21:03,891 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[170:174] new[164:169]
2020-05-25 15:21:03,892 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 170 to 176 (to 176 in part parser)
2020-05-25 15:21:03,892 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 177 to 179 (to 179 in part parser)
2020-05-25 15:21:03,893 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[187:430] new[180:425]
2020-05-25 15:21:03,893 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 426 to 434 (to 434 in part parser)
2020-05-25 15:21:03,893 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[433:434] new[428:453]
2020-05-25 15:21:03,894 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 435 to 445 (to 445 in part parser)
2020-05-25 15:21:03,896 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 446 to 505 (to 505 in part parser)
2020-05-25 15:21:03,896 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[435:440] new[454:459]
2020-05-25 15:21:03,896 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[441:454] new[460:487]
2020-05-25 15:21:03,896 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[455:461] new[488:494]
2020-05-25 15:21:03,896 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[462:461] new[495:504]
2020-05-25 15:21:03,896 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[462:464] new[505:507]
2020-05-25 15:21:03,897 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[463:463] new[506:506]
2020-05-25 15:21:03,898 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 507 to 514 (to 514 in part parser)
2020-05-25 15:21:03,898 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[465:465] new[508:508]
2020-05-25 15:21:03,899 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[466:466] new[509:509]
2020-05-25 15:21:03,899 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[467:467] new[510:511]
2020-05-25 15:21:03,899 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[468:468] new[512:512]
2020-05-25 15:21:03,899 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[469:470] new[513:514]
2020-05-25 15:21:03,899 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[471:471] new[515:515]
2020-05-25 15:21:03,899 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:03,905 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:03,907 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 906; new: 907
2020-05-25 15:21:03,907 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:11] new[1:11]
2020-05-25 15:21:03,908 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:11] new[1:11]
2020-05-25 15:21:03,908 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[12:12] new[12:12]
2020-05-25 15:21:03,908 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 12 to 12 (to 12 in part parser)
2020-05-25 15:21:03,908 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[13:13] new[13:13]
2020-05-25 15:21:03,908 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[13:13] new[13:13]
2020-05-25 15:21:03,908 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[14:13] new[14:14]
2020-05-25 15:21:03,908 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 14 to 14 (to 14 in part parser)
2020-05-25 15:21:03,908 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[14:125] new[15:126]
2020-05-25 15:21:03,909 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[16:133] new[15:121]
2020-05-25 15:21:03,910 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 122 to 136 (to 136 in part parser)
2020-05-25 15:21:03,911 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[126:126] new[127:127]
2020-05-25 15:21:03,911 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[127:195] new[128:196]
2020-05-25 15:21:03,911 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 137 to 138 (to 138 in part parser)
2020-05-25 15:21:03,911 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[140:205] new[139:191]
2020-05-25 15:21:03,913 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 192 to 208 (to 208 in part parser)
2020-05-25 15:21:03,913 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[196:196] new[197:197]
2020-05-25 15:21:03,913 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[197:197] new[198:198]
2020-05-25 15:21:03,914 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[198:198] new[199:199]
2020-05-25 15:21:03,914 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[199:437] new[200:438]
2020-05-25 15:21:03,915 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 209 to 217 (to 217 in part parser)
2020-05-25 15:21:03,915 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[219:432] new[218:433]
2020-05-25 15:21:03,915 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 434 to 439 (to 439 in part parser)
2020-05-25 15:21:03,916 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[438:440] new[439:441]
2020-05-25 15:21:03,916 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 440 to 441 (to 441 in part parser)
2020-05-25 15:21:03,916 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[441:473] new[442:474]
2020-05-25 15:21:03,916 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[443:448] new[442:449]
2020-05-25 15:21:03,917 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 450 to 482 (to 482 in part parser)
2020-05-25 15:21:03,917 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[474:474] new[475:475]
2020-05-25 15:21:03,917 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[475:576] new[476:577]
2020-05-25 15:21:03,921 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 483 to 527 (to 527 in part parser)
2020-05-25 15:21:03,922 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 528 to 531 (to 531 in part parser)
2020-05-25 15:21:03,922 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[533:541] new[532:542]
2020-05-25 15:21:03,922 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 543 to 580 (to 580 in part parser)
2020-05-25 15:21:03,923 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[577:577] new[578:578]
2020-05-25 15:21:03,923 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[578:906] new[579:907]
2020-05-25 15:21:03,923 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[581:599] new[581:600]
2020-05-25 15:21:03,923 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[602:905] new[601:906]
2020-05-25 15:21:03,924 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:03,931 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:03,931 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 52; new: 66
2020-05-25 15:21:03,931 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[1:0] new[1:13]
2020-05-25 15:21:03,931 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 13 (to 13 in part parser)
2020-05-25 15:21:03,932 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:4] new[14:17]
2020-05-25 15:21:03,932 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:3] new[14:16]
2020-05-25 15:21:03,932 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 17 to 18 (to 18 in part parser)
2020-05-25 15:21:03,932 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[5:5] new[18:17]
2020-05-25 15:21:03,932 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[6:7] new[18:19]
2020-05-25 15:21:03,932 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 19 to 22 (to 22 in part parser)
2020-05-25 15:21:03,932 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[8:7] new[20:25]
2020-05-25 15:21:03,933 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 23 to 26 (to 26 in part parser)
2020-05-25 15:21:03,933 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[8:10] new[26:28]
2020-05-25 15:21:03,933 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[9:10] new[27:28]
2020-05-25 15:21:03,933 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[11:11] new[29:28]
2020-05-25 15:21:03,933 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[12:18] new[29:35]
2020-05-25 15:21:03,933 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[12:17] new[29:34]
2020-05-25 15:21:03,933 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 35 to 36 (to 36 in part parser)
2020-05-25 15:21:03,933 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[19:19] new[36:35]
2020-05-25 15:21:03,934 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[20:20] new[36:36]
2020-05-25 15:21:03,934 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[21:21] new[37:36]
2020-05-25 15:21:03,934 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[22:30] new[37:45]
2020-05-25 15:21:03,934 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 37 to 37 (to 37 in part parser)
2020-05-25 15:21:03,934 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[23:29] new[38:44]
2020-05-25 15:21:03,934 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 45 to 46 (to 46 in part parser)
2020-05-25 15:21:03,935 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[31:31] new[46:46]
2020-05-25 15:21:03,935 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[32:34] new[47:49]
2020-05-25 15:21:03,935 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[32:34] new[47:49]
2020-05-25 15:21:03,935 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[35:35] new[50:49]
2020-05-25 15:21:03,935 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[36:52] new[50:66]
2020-05-25 15:21:03,935 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[36:51] new[50:65]
2020-05-25 15:21:03,935 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:03,937 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:03,938 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 727; new: 733
2020-05-25 15:21:03,938 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:70] new[1:70]
2020-05-25 15:21:03,939 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:80] new[1:70]
2020-05-25 15:21:03,939 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[71:73] new[71:73]
2020-05-25 15:21:03,940 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 71 to 73 (to 73 in part parser)
2020-05-25 15:21:03,940 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[74:77] new[74:77]
2020-05-25 15:21:03,940 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[74:75] new[74:75]
2020-05-25 15:21:03,941 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 76 to 78 (to 78 in part parser)
2020-05-25 15:21:03,941 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[78:80] new[78:78]
2020-05-25 15:21:03,941 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[81:397] new[79:395]
2020-05-25 15:21:03,941 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[83:367] new[79:365]
2020-05-25 15:21:03,942 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 366 to 461 (to 461 in part parser)
2020-05-25 15:21:03,942 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[398:397] new[396:397]
2020-05-25 15:21:03,942 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[398:400] new[398:400]
2020-05-25 15:21:03,942 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[401:400] new[401:402]
2020-05-25 15:21:03,942 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[401:404] new[403:406]
2020-05-25 15:21:03,942 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[405:404] new[407:408]
2020-05-25 15:21:03,942 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[405:408] new[409:412]
2020-05-25 15:21:03,942 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[409:410] new[413:416]
2020-05-25 15:21:03,942 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[411:727] new[417:733]
2020-05-25 15:21:03,943 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[456:479] new[462:485]
2020-05-25 15:21:03,943 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[483:726] new[486:728]
2020-05-25 15:21:03,944 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 729 to 732 (to 732 in part parser)
2020-05-25 15:21:03,944 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:03,951 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:04,137 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 4816; new: 4809
2020-05-25 15:21:04,137 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:318] new[1:318]
2020-05-25 15:21:04,137 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:290] new[1:290]
2020-05-25 15:21:04,138 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 291 to 389 (to 389 in part parser)
2020-05-25 15:21:04,139 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[319:319] new[319:323]
2020-05-25 15:21:04,139 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[320:324] new[324:328]
2020-05-25 15:21:04,139 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[325:325] new[329:328]
2020-05-25 15:21:04,139 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[326:360] new[329:363]
2020-05-25 15:21:04,139 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[361:361] new[364:364]
2020-05-25 15:21:04,139 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[362:362] new[365:365]
2020-05-25 15:21:04,139 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[363:363] new[366:366]
2020-05-25 15:21:04,139 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[364:365] new[367:368]
2020-05-25 15:21:04,139 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[366:366] new[369:369]
2020-05-25 15:21:04,139 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[367:681] new[370:684]
2020-05-25 15:21:04,139 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[387:422] new[390:425]
2020-05-25 15:21:04,141 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 426 to 434 (to 434 in part parser)
2020-05-25 15:21:04,142 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 435 to 495 (to 495 in part parser)
2020-05-25 15:21:04,142 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[493:497] new[496:500]
2020-05-25 15:21:04,142 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[500:738] new[501:677]
2020-05-25 15:21:04,144 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 678 to 687 (to 687 in part parser)
2020-05-25 15:21:04,144 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[682:686] new[685:685]
2020-05-25 15:21:04,144 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[687:701] new[686:700]
2020-05-25 15:21:04,144 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[689:699] new[688:698]
2020-05-25 15:21:04,147 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 699 to 713 (to 713 in part parser)
2020-05-25 15:21:04,147 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[702:702] new[701:700]
2020-05-25 15:21:04,147 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[703:705] new[701:703]
2020-05-25 15:21:04,147 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[706:720] new[704:705]
2020-05-25 15:21:04,147 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[721:996] new[706:981]
2020-05-25 15:21:04,147 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[733:738] new[714:723]
2020-05-25 15:21:04,148 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[741:1140] new[724:971]
2020-05-25 15:21:04,152 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 972 to 1003 (to 1003 in part parser)
2020-05-25 15:21:04,153 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[997:997] new[982:983]
2020-05-25 15:21:04,153 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[998:998] new[984:984]
2020-05-25 15:21:04,153 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[999:999] new[985:985]
2020-05-25 15:21:04,153 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1000:1003] new[986:989]
2020-05-25 15:21:04,153 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[1004:1003] new[990:993]
2020-05-25 15:21:04,153 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1004:1041] new[994:1031]
2020-05-25 15:21:04,153 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1014:1031] new[1004:1021]
2020-05-25 15:21:04,171 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1022 to 1136 (to 1136 in part parser)
2020-05-25 15:21:04,172 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1042:1043] new[1032:1037]
2020-05-25 15:21:04,172 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1044:1166] new[1038:1160]
2020-05-25 15:21:04,173 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1137 to 1138 (to 1138 in part parser)
2020-05-25 15:21:04,174 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1139 to 1225 (to 1225 in part parser)
2020-05-25 15:21:04,174 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1167:1167] new[1161:1161]
2020-05-25 15:21:04,174 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1168:1170] new[1162:1164]
2020-05-25 15:21:04,174 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1171:1171] new[1165:1167]
2020-05-25 15:21:04,174 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1172:1329] new[1168:1325]
2020-05-25 15:21:04,174 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1230:1275] new[1226:1271]
2020-05-25 15:21:04,174 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1278:1279] new[1272:1275]
2020-05-25 15:21:04,175 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1276 to 1377 (to 1377 in part parser)
2020-05-25 15:21:04,175 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1330:1332] new[1326:1332]
2020-05-25 15:21:04,176 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1333:1904] new[1333:1904]
2020-05-25 15:21:04,176 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1379:1412] new[1378:1412]
2020-05-25 15:21:04,176 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1415:1875] new[1413:1875]
2020-05-25 15:21:04,177 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1876 to 2030 (to 2030 in part parser)
2020-05-25 15:21:04,177 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1905:1905] new[1905:1905]
2020-05-25 15:21:04,177 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1906:2316] new[1906:2316]
2020-05-25 15:21:04,178 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[2031:2237] new[2031:2237]
2020-05-25 15:21:04,178 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[2240:2242] new[2238:2242]
2020-05-25 15:21:04,179 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 2243 to 2362 (to 2362 in part parser)
2020-05-25 15:21:04,179 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[2317:2317] new[2317:2317]
2020-05-25 15:21:04,179 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[2318:3311] new[2318:3311]
2020-05-25 15:21:04,180 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[2364:2456] new[2363:2456]
2020-05-25 15:21:04,180 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[2459:3242] new[2457:3242]
2020-05-25 15:21:04,181 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 3243 to 3313 (to 3313 in part parser)
2020-05-25 15:21:04,181 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[3312:3318] new[3312:3311]
2020-05-25 15:21:04,181 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[3319:4816] new[3312:4809]
2020-05-25 15:21:04,181 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[3321:3323] new[3314:3316]
2020-05-25 15:21:04,181 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[3326:4815] new[3317:4803]
2020-05-25 15:21:04,182 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 4804 to 4808 (to 4808 in part parser)
2020-05-25 15:21:04,187 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:04,232 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:04,236 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1672; new: 1673
2020-05-25 15:21:04,236 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:97] new[1:97]
2020-05-25 15:21:04,236 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:111] new[1:97]
2020-05-25 15:21:04,236 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[98:98] new[98:98]
2020-05-25 15:21:04,237 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 98 to 98 (to 98 in part parser)
2020-05-25 15:21:04,237 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[99:101] new[99:101]
2020-05-25 15:21:04,239 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 99 to 112 (to 112 in part parser)
2020-05-25 15:21:04,239 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[102:102] new[102:102]
2020-05-25 15:21:04,239 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[103:108] new[103:108]
2020-05-25 15:21:04,239 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[109:108] new[109:109]
2020-05-25 15:21:04,239 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[109:246] new[110:247]
2020-05-25 15:21:04,239 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[114:226] new[113:227]
2020-05-25 15:21:04,240 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 228 to 314 (to 314 in part parser)
2020-05-25 15:21:04,240 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[247:248] new[248:249]
2020-05-25 15:21:04,241 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[249:361] new[250:362]
2020-05-25 15:21:04,241 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[314:337] new[315:338]
2020-05-25 15:21:04,241 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[340:341] new[339:342]
2020-05-25 15:21:04,242 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 343 to 429 (to 429 in part parser)
2020-05-25 15:21:04,242 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[362:363] new[363:364]
2020-05-25 15:21:04,242 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[364:587] new[365:588]
2020-05-25 15:21:04,242 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[429:452] new[430:453]
2020-05-25 15:21:04,243 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[455:555] new[454:556]
2020-05-25 15:21:04,244 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 557 to 648 (to 648 in part parser)
2020-05-25 15:21:04,244 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[588:589] new[589:590]
2020-05-25 15:21:04,244 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[590:683] new[591:684]
2020-05-25 15:21:04,244 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[648:649] new[649:650]
2020-05-25 15:21:04,244 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[652:653] new[651:654]
2020-05-25 15:21:04,245 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 655 to 718 (to 718 in part parser)
2020-05-25 15:21:04,245 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[684:686] new[685:687]
2020-05-25 15:21:04,245 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[687:752] new[688:753]
2020-05-25 15:21:04,246 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[718:719] new[719:720]
2020-05-25 15:21:04,246 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[722:723] new[721:724]
2020-05-25 15:21:04,247 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 725 to 788 (to 788 in part parser)
2020-05-25 15:21:04,247 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[753:754] new[754:755]
2020-05-25 15:21:04,247 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[755:890] new[756:891]
2020-05-25 15:21:04,247 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[788:789] new[789:790]
2020-05-25 15:21:04,247 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[792:860] new[791:861]
2020-05-25 15:21:04,248 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 862 to 938 (to 938 in part parser)
2020-05-25 15:21:04,248 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[891:892] new[892:893]
2020-05-25 15:21:04,248 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[893:1445] new[894:1446]
2020-05-25 15:21:04,249 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[938:958] new[939:959]
2020-05-25 15:21:04,249 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[961:1419] new[960:1420]
2020-05-25 15:21:04,250 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1421 to 1513 (to 1513 in part parser)
2020-05-25 15:21:04,250 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1446:1446] new[1447:1447]
2020-05-25 15:21:04,250 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1447:1475] new[1448:1476]
2020-05-25 15:21:04,250 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1476:1476] new[1477:1477]
2020-05-25 15:21:04,250 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1477:1627] new[1478:1628]
2020-05-25 15:21:04,250 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1513:1562] new[1514:1563]
2020-05-25 15:21:04,251 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1565:1567] new[1564:1568]
2020-05-25 15:21:04,252 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1569 to 1665 (to 1665 in part parser)
2020-05-25 15:21:04,252 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1628:1628] new[1629:1629]
2020-05-25 15:21:04,252 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1629:1672] new[1630:1673]
2020-05-25 15:21:04,252 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1665:1671] new[1666:1672]
2020-05-25 15:21:04,254 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:04,267 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:04,269 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1245; new: 1259
2020-05-25 15:21:04,269 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:3] new[1:3]
2020-05-25 15:21:04,270 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:3] new[1:3]
2020-05-25 15:21:04,270 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[4:4] new[4:3]
2020-05-25 15:21:04,270 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[5:13] new[4:12]
2020-05-25 15:21:04,270 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[6:13] new[4:12]
2020-05-25 15:21:04,270 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[14:13] new[13:13]
2020-05-25 15:21:04,270 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 13 to 13 (to 13 in part parser)
2020-05-25 15:21:04,270 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[14:31] new[14:31]
2020-05-25 15:21:04,270 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[14:28] new[14:28]
2020-05-25 15:21:04,272 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 29 to 38 (to 38 in part parser)
2020-05-25 15:21:04,272 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[32:32] new[32:32]
2020-05-25 15:21:04,272 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[33:519] new[33:519]
2020-05-25 15:21:04,272 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[39:51] new[39:51]
2020-05-25 15:21:04,272 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[54:509] new[52:509]
2020-05-25 15:21:04,273 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 510 to 587 (to 587 in part parser)
2020-05-25 15:21:04,273 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[520:524] new[520:519]
2020-05-25 15:21:04,273 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[525:528] new[520:523]
2020-05-25 15:21:04,273 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[529:530] new[524:534]
2020-05-25 15:21:04,273 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[531:533] new[535:537]
2020-05-25 15:21:04,273 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[534:535] new[538:539]
2020-05-25 15:21:04,273 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[536:544] new[540:548]
2020-05-25 15:21:04,273 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[545:545] new[549:549]
2020-05-25 15:21:04,273 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[546:548] new[550:552]
2020-05-25 15:21:04,273 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[549:549] new[553:553]
2020-05-25 15:21:04,273 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[550:556] new[554:560]
2020-05-25 15:21:04,273 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[557:557] new[561:563]
2020-05-25 15:21:04,273 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[558:563] new[564:569]
2020-05-25 15:21:04,274 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[564:563] new[570:580]
2020-05-25 15:21:04,274 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[564:575] new[581:592]
2020-05-25 15:21:04,275 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 588 to 596 (to 596 in part parser)
2020-05-25 15:21:04,275 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[576:587] new[593:602]
2020-05-25 15:21:04,276 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 597 to 602 (to 602 in part parser)
2020-05-25 15:21:04,276 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[588:784] new[603:799]
2020-05-25 15:21:04,276 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[590:779] new[603:794]
2020-05-25 15:21:04,277 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 795 to 863 (to 863 in part parser)
2020-05-25 15:21:04,277 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[785:785] new[800:800]
2020-05-25 15:21:04,277 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[786:811] new[801:826]
2020-05-25 15:21:04,277 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[812:812] new[827:827]
2020-05-25 15:21:04,277 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[813:856] new[828:871]
2020-05-25 15:21:04,279 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 864 to 872 (to 872 in part parser)
2020-05-25 15:21:04,279 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[857:858] new[872:872]
2020-05-25 15:21:04,279 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[859:1245] new[873:1259]
2020-05-25 15:21:04,279 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[861:1244] new[873:1258]
2020-05-25 15:21:04,280 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:04,290 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:04,292 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1018; new: 1018
2020-05-25 15:21:04,292 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:370] new[1:370]
2020-05-25 15:21:04,292 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:345] new[1:345]
2020-05-25 15:21:04,293 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 346 to 385 (to 385 in part parser)
2020-05-25 15:21:04,293 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[371:371] new[371:371]
2020-05-25 15:21:04,293 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[372:1018] new[372:1018]
2020-05-25 15:21:04,293 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[386:395] new[386:395]
2020-05-25 15:21:04,294 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[398:1017] new[396:1017]
2020-05-25 15:21:04,294 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:04,300 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:04,302 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1114; new: 1124
2020-05-25 15:21:04,302 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:22] new[1:22]
2020-05-25 15:21:04,302 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:22] new[1:22]
2020-05-25 15:21:04,302 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[23:22] new[23:32]
2020-05-25 15:21:04,303 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 23 to 32 (to 32 in part parser)
2020-05-25 15:21:04,303 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[23:42] new[33:52]
2020-05-25 15:21:04,303 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[25:43] new[33:52]
2020-05-25 15:21:04,303 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[43:43] new[53:53]
2020-05-25 15:21:04,304 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 53 to 53 (to 53 in part parser)
2020-05-25 15:21:04,304 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[44:65] new[54:75]
2020-05-25 15:21:04,304 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[46:66] new[54:75]
2020-05-25 15:21:04,304 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[66:66] new[76:76]
2020-05-25 15:21:04,304 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 76 to 76 (to 76 in part parser)
2020-05-25 15:21:04,305 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[67:89] new[77:99]
2020-05-25 15:21:04,305 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[69:90] new[77:99]
2020-05-25 15:21:04,305 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[90:90] new[100:100]
2020-05-25 15:21:04,305 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 100 to 100 (to 100 in part parser)
2020-05-25 15:21:04,305 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[91:139] new[101:149]
2020-05-25 15:21:04,306 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[93:154] new[101:149]
2020-05-25 15:21:04,306 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[140:140] new[150:150]
2020-05-25 15:21:04,306 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 150 to 150 (to 150 in part parser)
2020-05-25 15:21:04,306 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[141:186] new[151:196]
2020-05-25 15:21:04,306 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[141:154] new[151:164]
2020-05-25 15:21:04,306 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[157:189] new[165:185]
2020-05-25 15:21:04,309 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 186 to 199 (to 199 in part parser)
2020-05-25 15:21:04,309 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[187:187] new[197:197]
2020-05-25 15:21:04,309 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[188:1114] new[198:1124]
2020-05-25 15:21:04,309 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[192:1113] new[200:1123]
2020-05-25 15:21:04,311 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:04,322 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:04,324 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1380; new: 1380
2020-05-25 15:21:04,324 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:481] new[1:481]
2020-05-25 15:21:04,324 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:428] new[1:428]
2020-05-25 15:21:04,326 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 429 to 590 (to 590 in part parser)
2020-05-25 15:21:04,326 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[482:485] new[482:485]
2020-05-25 15:21:04,326 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[486:1380] new[486:1380]
2020-05-25 15:21:04,326 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[591:637] new[591:637]
2020-05-25 15:21:04,329 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 638 to 662 (to 662 in part parser)
2020-05-25 15:21:04,329 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 663 to 664 (to 664 in part parser)
2020-05-25 15:21:04,329 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[667:1379] new[665:1379]
2020-05-25 15:21:04,329 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:04,345 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:04,347 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1181; new: 1089
2020-05-25 15:21:04,347 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:790] new[1:790]
2020-05-25 15:21:04,347 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:855] new[1:783]
2020-05-25 15:21:04,349 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 784 to 800 (to 800 in part parser)
2020-05-25 15:21:04,349 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[791:791] new[791:790]
2020-05-25 15:21:04,349 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[792:792] new[791:791]
2020-05-25 15:21:04,349 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[793:797] new[792:792]
2020-05-25 15:21:04,349 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[798:1004] new[793:999]
2020-05-25 15:21:04,349 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[807:846] new[801:841]
2020-05-25 15:21:04,351 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 842 to 851 (to 851 in part parser)
2020-05-25 15:21:04,351 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 852 to 871 (to 871 in part parser)
2020-05-25 15:21:04,351 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[877:995] new[872:990]
2020-05-25 15:21:04,351 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[997:1004] new[991:999]
2020-05-25 15:21:04,352 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[1005:1091] new[1000:999]
2020-05-25 15:21:04,352 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1092:1181] new[1000:1089]
2020-05-25 15:21:04,352 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1094:1178] new[1000:1086]
2020-05-25 15:21:04,352 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1087 to 1088 (to 1088 in part parser)
2020-05-25 15:21:04,353 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:04,370 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:04,371 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 788; new: 789
2020-05-25 15:21:04,371 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:215] new[1:215]
2020-05-25 15:21:04,371 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:148] new[1:148]
2020-05-25 15:21:04,373 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 149 to 260 (to 260 in part parser)
2020-05-25 15:21:04,373 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[216:215] new[216:216]
2020-05-25 15:21:04,373 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[216:266] new[217:267]
2020-05-25 15:21:04,373 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[260:260] new[261:261]
2020-05-25 15:21:04,375 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 262 to 274 (to 274 in part parser)
2020-05-25 15:21:04,375 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[267:267] new[268:268]
2020-05-25 15:21:04,375 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[268:287] new[269:288]
2020-05-25 15:21:04,375 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[274:289] new[275:288]
2020-05-25 15:21:04,375 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[288:288] new[289:289]
2020-05-25 15:21:04,375 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 289 to 289 (to 289 in part parser)
2020-05-25 15:21:04,376 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[289:788] new[290:789]
2020-05-25 15:21:04,376 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[289:289] new[290:290]
2020-05-25 15:21:04,376 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[291:294] new[291:295]
2020-05-25 15:21:04,376 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[297:786] new[296:787]
2020-05-25 15:21:04,376 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 788 to 788 (to 788 in part parser)
2020-05-25 15:21:04,377 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:04,385 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:04,392 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 2367; new: 2381
2020-05-25 15:21:04,392 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:482] new[1:482]
2020-05-25 15:21:04,392 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:470] new[1:470]
2020-05-25 15:21:04,393 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 471 to 533 (to 533 in part parser)
2020-05-25 15:21:04,393 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[483:483] new[483:483]
2020-05-25 15:21:04,393 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[484:509] new[484:509]
2020-05-25 15:21:04,393 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[510:509] new[510:511]
2020-05-25 15:21:04,393 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[510:521] new[512:523]
2020-05-25 15:21:04,394 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[522:521] new[524:532]
2020-05-25 15:21:04,394 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[522:556] new[533:567]
2020-05-25 15:21:04,394 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[523:537] new[534:548]
2020-05-25 15:21:04,395 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 549 to 558 (to 558 in part parser)
2020-05-25 15:21:04,396 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 559 to 644 (to 644 in part parser)
2020-05-25 15:21:04,396 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[557:558] new[568:568]
2020-05-25 15:21:04,396 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[559:567] new[569:577]
2020-05-25 15:21:04,396 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[568:568] new[578:578]
2020-05-25 15:21:04,396 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[569:569] new[579:579]
2020-05-25 15:21:04,396 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[570:570] new[580:580]
2020-05-25 15:21:04,396 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[571:602] new[581:612]
2020-05-25 15:21:04,397 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[603:602] new[613:616]
2020-05-25 15:21:04,397 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[603:629] new[617:643]
2020-05-25 15:21:04,397 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[630:630] new[644:643]
2020-05-25 15:21:04,397 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[631:647] new[644:660]
2020-05-25 15:21:04,397 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[632:632] new[645:645]
2020-05-25 15:21:04,397 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[635:639] new[646:652]
2020-05-25 15:21:04,398 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 653 to 716 (to 716 in part parser)
2020-05-25 15:21:04,398 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[648:648] new[661:661]
2020-05-25 15:21:04,398 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[649:653] new[662:666]
2020-05-25 15:21:04,398 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[654:654] new[667:667]
2020-05-25 15:21:04,398 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[655:655] new[668:668]
2020-05-25 15:21:04,398 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[656:656] new[669:669]
2020-05-25 15:21:04,398 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[657:822] new[670:835]
2020-05-25 15:21:04,398 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[704:704] new[717:717]
2020-05-25 15:21:04,399 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[707:806] new[718:819]
2020-05-25 15:21:04,400 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 820 to 936 (to 936 in part parser)
2020-05-25 15:21:04,400 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[823:823] new[836:836]
2020-05-25 15:21:04,400 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[824:1460] new[837:1473]
2020-05-25 15:21:04,400 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[925:1180] new[937:1193]
2020-05-25 15:21:04,401 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1194 to 1204 (to 1204 in part parser)
2020-05-25 15:21:04,402 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1205 to 1208 (to 1208 in part parser)
2020-05-25 15:21:04,402 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1198:1446] new[1209:1459]
2020-05-25 15:21:04,403 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1460 to 1521 (to 1521 in part parser)
2020-05-25 15:21:04,403 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1461:1461] new[1474:1474]
2020-05-25 15:21:04,403 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1462:1518] new[1475:1531]
2020-05-25 15:21:04,403 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1509:1509] new[1522:1522]
2020-05-25 15:21:04,407 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1523 to 1560 (to 1560 in part parser)
2020-05-25 15:21:04,408 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1519:1519] new[1532:1532]
2020-05-25 15:21:04,408 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1520:1520] new[1533:1533]
2020-05-25 15:21:04,408 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1521:1521] new[1534:1534]
2020-05-25 15:21:04,408 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1522:1567] new[1535:1580]
2020-05-25 15:21:04,410 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1561 to 1743 (to 1743 in part parser)
2020-05-25 15:21:04,410 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1568:1568] new[1581:1581]
2020-05-25 15:21:04,410 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1569:1778] new[1582:1791]
2020-05-25 15:21:04,410 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1731:1752] new[1744:1765]
2020-05-25 15:21:04,413 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1766 to 1785 (to 1785 in part parser)
2020-05-25 15:21:04,413 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1773:1776] new[1786:1789]
2020-05-25 15:21:04,416 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1790 to 1828 (to 1828 in part parser)
2020-05-25 15:21:04,416 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[1779:1783] new[1792:1791]
2020-05-25 15:21:04,416 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1784:1784] new[1792:1792]
2020-05-25 15:21:04,417 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[1785:1784] new[1793:1798]
2020-05-25 15:21:04,417 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1785:2367] new[1799:2381]
2020-05-25 15:21:04,417 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1817:2021] new[1829:2035]
2020-05-25 15:21:04,420 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 2036 to 2063 (to 2063 in part parser)
2020-05-25 15:21:04,422 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 2064 to 2081 (to 2081 in part parser)
2020-05-25 15:21:04,422 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[2068:2240] new[2082:2254]
2020-05-25 15:21:04,422 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[2243:2366] new[2255:2380]
2020-05-25 15:21:04,426 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:04,621 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:04,626 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 831; new: 970
2020-05-25 15:21:04,626 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:14] new[1:14]
2020-05-25 15:21:04,627 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:13] new[1:13]
2020-05-25 15:21:04,627 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 14 to 15 (to 15 in part parser)
2020-05-25 15:21:04,627 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[15:14] new[15:15]
2020-05-25 15:21:04,627 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[15:20] new[16:21]
2020-05-25 15:21:04,628 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 16 to 16 (to 16 in part parser)
2020-05-25 15:21:04,628 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[16:19] new[17:20]
2020-05-25 15:21:04,629 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 21 to 25 (to 25 in part parser)
2020-05-25 15:21:04,629 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[21:20] new[22:25]
2020-05-25 15:21:04,629 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[21:47] new[26:52]
2020-05-25 15:21:04,629 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 26 to 28 (to 28 in part parser)
2020-05-25 15:21:04,630 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[26:44] new[29:49]
2020-05-25 15:21:04,631 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 50 to 54 (to 54 in part parser)
2020-05-25 15:21:04,631 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[48:47] new[53:54]
2020-05-25 15:21:04,631 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[48:54] new[55:61]
2020-05-25 15:21:04,631 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[48:48] new[55:55]
2020-05-25 15:21:04,633 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 56 to 148 (to 148 in part parser)
2020-05-25 15:21:04,633 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[55:54] new[62:67]
2020-05-25 15:21:04,633 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[55:102] new[68:115]
2020-05-25 15:21:04,633 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[103:103] new[116:118]
2020-05-25 15:21:04,633 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[104:111] new[119:126]
2020-05-25 15:21:04,633 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[112:111] new[127:127]
2020-05-25 15:21:04,633 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[112:141] new[128:157]
2020-05-25 15:21:04,634 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[133:138] new[149:154]
2020-05-25 15:21:04,635 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 155 to 159 (to 159 in part parser)
2020-05-25 15:21:04,635 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[142:141] new[158:159]
2020-05-25 15:21:04,635 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[142:148] new[160:166]
2020-05-25 15:21:04,635 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[142:142] new[160:160]
2020-05-25 15:21:04,637 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 161 to 254 (to 254 in part parser)
2020-05-25 15:21:04,637 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[149:148] new[167:172]
2020-05-25 15:21:04,637 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[149:206] new[173:230]
2020-05-25 15:21:04,637 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[207:207] new[231:233]
2020-05-25 15:21:04,637 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[208:239] new[234:265]
2020-05-25 15:21:04,637 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[229:236] new[255:262]
2020-05-25 15:21:04,638 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 263 to 267 (to 267 in part parser)
2020-05-25 15:21:04,639 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[240:239] new[266:267]
2020-05-25 15:21:04,639 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[240:246] new[268:274]
2020-05-25 15:21:04,639 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[240:240] new[268:268]
2020-05-25 15:21:04,640 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 269 to 333 (to 333 in part parser)
2020-05-25 15:21:04,640 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[247:246] new[275:280]
2020-05-25 15:21:04,640 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[247:272] new[281:306]
2020-05-25 15:21:04,640 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[273:272] new[307:311]
2020-05-25 15:21:04,640 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[273:313] new[312:352]
2020-05-25 15:21:04,640 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[295:303] new[334:342]
2020-05-25 15:21:04,642 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 343 to 351 (to 351 in part parser)
2020-05-25 15:21:04,643 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 352 to 354 (to 354 in part parser)
2020-05-25 15:21:04,644 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[314:313] new[353:354]
2020-05-25 15:21:04,644 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[314:320] new[355:361]
2020-05-25 15:21:04,644 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[314:314] new[355:355]
2020-05-25 15:21:04,645 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 356 to 452 (to 452 in part parser)
2020-05-25 15:21:04,645 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[321:320] new[362:367]
2020-05-25 15:21:04,645 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[321:355] new[368:402]
2020-05-25 15:21:04,645 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[356:355] new[403:407]
2020-05-25 15:21:04,645 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[356:424] new[408:476]
2020-05-25 15:21:04,646 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[401:411] new[453:463]
2020-05-25 15:21:04,646 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[414:421] new[464:473]
2020-05-25 15:21:04,647 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 474 to 478 (to 478 in part parser)
2020-05-25 15:21:04,647 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[425:424] new[477:478]
2020-05-25 15:21:04,647 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[425:431] new[479:485]
2020-05-25 15:21:04,647 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[425:425] new[479:479]
2020-05-25 15:21:04,648 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 480 to 518 (to 518 in part parser)
2020-05-25 15:21:04,648 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[432:431] new[486:491]
2020-05-25 15:21:04,648 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[432:452] new[492:512]
2020-05-25 15:21:04,649 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[453:452] new[513:517]
2020-05-25 15:21:04,649 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[453:458] new[518:523]
2020-05-25 15:21:04,649 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[454:455] new[519:520]
2020-05-25 15:21:04,650 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 521 to 525 (to 525 in part parser)
2020-05-25 15:21:04,650 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[459:458] new[524:525]
2020-05-25 15:21:04,650 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[459:465] new[526:532]
2020-05-25 15:21:04,650 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[459:459] new[526:526]
2020-05-25 15:21:04,651 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 527 to 623 (to 623 in part parser)
2020-05-25 15:21:04,651 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[466:465] new[533:538]
2020-05-25 15:21:04,652 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[466:512] new[539:585]
2020-05-25 15:21:04,652 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[513:513] new[586:588]
2020-05-25 15:21:04,652 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[514:569] new[589:644]
2020-05-25 15:21:04,652 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[549:553] new[624:628]
2020-05-25 15:21:04,652 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[560:565] new[629:640]
2020-05-25 15:21:04,653 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 641 to 646 (to 646 in part parser)
2020-05-25 15:21:04,654 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[570:569] new[645:646]
2020-05-25 15:21:04,654 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[570:583] new[647:660]
2020-05-25 15:21:04,654 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[570:570] new[647:647]
2020-05-25 15:21:04,655 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 648 to 709 (to 709 in part parser)
2020-05-25 15:21:04,655 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[584:583] new[661:666]
2020-05-25 15:21:04,655 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[584:614] new[667:697]
2020-05-25 15:21:04,655 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[615:621] new[698:707]
2020-05-25 15:21:04,655 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[622:653] new[708:739]
2020-05-25 15:21:04,656 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[624:645] new[710:731]
2020-05-25 15:21:04,656 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 732 to 738 (to 738 in part parser)
2020-05-25 15:21:04,657 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 739 to 741 (to 741 in part parser)
2020-05-25 15:21:04,657 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[654:653] new[740:741]
2020-05-25 15:21:04,657 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[654:660] new[742:748]
2020-05-25 15:21:04,658 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[654:654] new[742:742]
2020-05-25 15:21:04,658 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 743 to 814 (to 814 in part parser)
2020-05-25 15:21:04,659 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[661:660] new[749:754]
2020-05-25 15:21:04,659 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[661:695] new[755:789]
2020-05-25 15:21:04,659 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[696:696] new[790:790]
2020-05-25 15:21:04,659 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[697:701] new[791:795]
2020-05-25 15:21:04,659 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[702:702] new[796:798]
2020-05-25 15:21:04,659 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[703:716] new[799:812]
2020-05-25 15:21:04,659 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[delete] old[717:718] new[813:812]
2020-05-25 15:21:04,659 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[719:738] new[813:832]
2020-05-25 15:21:04,659 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[726:735] new[815:829]
2020-05-25 15:21:04,660 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 830 to 834 (to 834 in part parser)
2020-05-25 15:21:04,660 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[739:738] new[833:834]
2020-05-25 15:21:04,660 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[739:745] new[835:841]
2020-05-25 15:21:04,660 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[739:739] new[835:835]
2020-05-25 15:21:04,661 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 836 to 911 (to 911 in part parser)
2020-05-25 15:21:04,661 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[746:745] new[842:847]
2020-05-25 15:21:04,661 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[746:765] new[848:867]
2020-05-25 15:21:04,661 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[766:765] new[868:876]
2020-05-25 15:21:04,662 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[766:767] new[877:878]
2020-05-25 15:21:04,662 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[768:768] new[879:879]
2020-05-25 15:21:04,662 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[769:773] new[880:884]
2020-05-25 15:21:04,662 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[774:774] new[885:887]
2020-05-25 15:21:04,662 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[775:778] new[888:891]
2020-05-25 15:21:04,662 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[779:782] new[892:909]
2020-05-25 15:21:04,662 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[783:789] new[910:916]
2020-05-25 15:21:04,662 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[785:786] new[912:913]
2020-05-25 15:21:04,663 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 914 to 918 (to 918 in part parser)
2020-05-25 15:21:04,663 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[790:789] new[917:918]
2020-05-25 15:21:04,663 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[790:796] new[919:925]
2020-05-25 15:21:04,663 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[790:790] new[919:919]
2020-05-25 15:21:04,664 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 920 to 953 (to 953 in part parser)
2020-05-25 15:21:04,664 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[797:796] new[926:931]
2020-05-25 15:21:04,664 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[797:813] new[932:948]
2020-05-25 15:21:04,664 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[814:813] new[949:952]
2020-05-25 15:21:04,664 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[814:831] new[953:970]
2020-05-25 15:21:04,664 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[815:830] new[954:969]
2020-05-25 15:21:04,666 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:04,674 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:04,675 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 875; new: 882
2020-05-25 15:21:04,675 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:273] new[1:273]
2020-05-25 15:21:04,675 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:291] new[1:270]
2020-05-25 15:21:04,677 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 271 to 282 (to 282 in part parser)
2020-05-25 15:21:04,677 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[274:273] new[274:279]
2020-05-25 15:21:04,677 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[274:290] new[280:296]
2020-05-25 15:21:04,677 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[277:290] new[283:296]
2020-05-25 15:21:04,677 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[291:290] new[297:297]
2020-05-25 15:21:04,678 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 297 to 298 (to 298 in part parser)
2020-05-25 15:21:04,678 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[291:785] new[298:792]
2020-05-25 15:21:04,678 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[294:874] new[299:788]
2020-05-25 15:21:04,679 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 789 to 794 (to 794 in part parser)
2020-05-25 15:21:04,679 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[786:786] new[793:793]
2020-05-25 15:21:04,679 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[787:875] new[794:882]
2020-05-25 15:21:04,679 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[791:874] new[795:881]
2020-05-25 15:21:04,681 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:04,693 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:04,694 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1116; new: 1116
2020-05-25 15:21:04,694 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:1048] new[1:1048]
2020-05-25 15:21:04,695 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:1034] new[1:1034]
2020-05-25 15:21:04,696 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1035 to 1090 (to 1090 in part parser)
2020-05-25 15:21:04,696 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1049:1049] new[1049:1049]
2020-05-25 15:21:04,696 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1050:1116] new[1050:1116]
2020-05-25 15:21:04,696 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1091:1111] new[1091:1111]
2020-05-25 15:21:04,696 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1112 to 1114 (to 1114 in part parser)
2020-05-25 15:21:04,697 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1115 to 1115 (to 1115 in part parser)
2020-05-25 15:21:04,697 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:07,464 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:07,465 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 2; new: 2
2020-05-25 15:21:07,465 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2020-05-25 15:21:07,465 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:1] new[1:1]
2020-05-25 15:21:07,465 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2020-05-25 15:21:07,466 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2020-05-25 15:21:07,466 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:11,588 [2700] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-25 15:21:11,589 [2700] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 2; new: 2
2020-05-25 15:21:11,589 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2020-05-25 15:21:11,589 [2700] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:1] new[1:1]
2020-05-25 15:21:11,590 [2700] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2020-05-25 15:21:11,591 [2700] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2020-05-25 15:21:11,591 [2700] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-25 15:21:11,737 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/__future__.py
2020-05-25 15:21:11,766 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/__future__.pyi
2020-05-25 15:21:12,258 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/3/itertools.pyi
2020-05-25 15:21:12,381 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/scipy/__init__.py
2020-05-25 15:21:12,413 [2700] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/scipy/linalg/__init__.py
2020-05-25 16:13:22,704 [4289] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-25 16:13:22,723 [4289] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-25 16:13:22,723 [4289] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-25 16:13:22,730 [4289] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-25 16:13:22,731 [4289] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-25 16:13:22,732 [4289] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-25 16:13:26,420 [4289] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-25 16:13:26,420 [4289] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-25 16:13:26,420 [4289] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-25 16:13:26,423 [4289] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-25 16:13:26,423 [4289] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-25 16:13:26,423 [4289] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-25 16:15:34,948 [4289] DEBUG    matplotlib:276: [JupyterRequire] $HOME=/home/juan
2020-05-25 16:15:34,964 [4289] DEBUG    matplotlib:276: [JupyterRequire] CONFIGDIR=/home/juan/.config/matplotlib
2020-05-25 16:15:34,977 [4289] DEBUG    matplotlib:276: [JupyterRequire] matplotlib data path: /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data
2020-05-25 16:15:35,009 [4289] DEBUG    matplotlib:1007: [JupyterRequire] loaded rc file /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-05-25 16:15:35,016 [4289] DEBUG    matplotlib:1644: [JupyterRequire] matplotlib version 3.1.3
2020-05-25 16:15:35,017 [4289] DEBUG    matplotlib:1645: [JupyterRequire] interactive is False
2020-05-25 16:15:35,017 [4289] DEBUG    matplotlib:1646: [JupyterRequire] platform is linux
2020-05-25 16:15:35,017 [4289] DEBUG    matplotlib:1647: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.cloud', 'google.logging', 'google.iam', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', 'errno', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'gettext', 'ast', '_ast', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'textwrap', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'base64', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'array', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.file_io', 'queue', '_queue', 'jedi.parser_utils', 'jedi.debug', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.evaluate', 'jedi.evaluate.utils', 'jedi.evaluate.imports', 'jedi.evaluate.sys_path', 'jedi.evaluate.cache', 'jedi.evaluate.base_context', 'jedi.common', 'jedi.common.context', 'jedi.evaluate.helpers', 'jedi.common.utils', 'jedi.evaluate.compiled', 'jedi.evaluate.compiled.context', 'jedi.evaluate.filters', 'jedi.evaluate.flow_analysis', 'jedi.evaluate.recursion', 'jedi.evaluate.names', 'jedi.evaluate.lazy_context', 'jedi.evaluate.compiled.access', 'jedi.evaluate.compiled.getattr_static', 'jedi.evaluate.signature', 'jedi.evaluate.analysis', 'jedi.evaluate.gradual', 'jedi.evaluate.gradual.typeshed', 'jedi.evaluate.gradual.stub_context', 'jedi.evaluate.context', 'jedi.evaluate.context.module', 'jedi.evaluate.context.klass', 'jedi.evaluate.arguments', 'jedi.evaluate.context.iterable', 'jedi.evaluate.param', 'jedi.evaluate.docstrings', 'jedi.evaluate.context.function', 'jedi.evaluate.parser_cache', 'jedi.evaluate.context.instance', 'jedi.evaluate.gradual.typing', 'jedi.evaluate.syntax_tree', 'jedi.evaluate.finder', 'jedi.evaluate.gradual.conversion', 'jedi.evaluate.gradual.annotation', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.interpreter', 'jedi.evaluate.compiled.mixed', 'jedi.api.helpers', 'jedi.api.completion', 'jedi.api.environment', 'filecmp', 'jedi.evaluate.compiled.subprocess', 'jedi.evaluate.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.evaluate.usages', 'jedi.evaluate.gradual.utils', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_14', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'distutils', 'distutils.util', 'distutils.errors', 'distutils.dep_util', 'distutils.spawn', 'distutils.debug', 'distutils.log', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'curses', '_curses', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.eventloops', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random._bit_generator', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'jedi.plugins', 'jedi.plugins.stdlib', 'jedi.plugins.base', 'jedi.plugins.flask', 'matplotlib', 'matplotlib.cbook', 'gzip', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-05-25 16:15:35,078 [4289] DEBUG    matplotlib:276: [JupyterRequire] CACHEDIR=/home/juan/.cache/matplotlib
2020-05-25 16:15:35,099 [4289] DEBUG    matplotlib.font_manager:1360: [JupyterRequire] Using fontManager instance from /home/juan/.cache/matplotlib/fontlist-v310.json
2020-05-25 16:15:35,749 [4289] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-05-25 16:15:35,760 [4289] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-05-25 16:15:36,863 [4289] DEBUG    matplotlib.font_manager:1259: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2020-05-25 16:15:36,863 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,863 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,863 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,863 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-25 16:15:36,863 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-25 16:15:36,863 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-25 16:15:36,863 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,863 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-25 16:15:36,863 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,864 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-25 16:15:36,865 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,866 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,867 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,868 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,869 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,870 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,871 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,872 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,873 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,874 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,875 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-25 16:15:36,876 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,877 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,877 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,877 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,877 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,877 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,877 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-25 16:15:36,877 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2020-05-25 16:15:36,877 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,877 [4289] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2020-05-25 16:15:36,877 [4289] DEBUG    matplotlib.font_manager:1294: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-05-25 16:15:41,023 [4289] WARNING  py.warnings:110: [JupyterRequire] /home/juan/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:4: UserWarning: In Matplotlib 3.3 individual lines on a stem plot will be added as a LineCollection instead of individual lines. This significantly improves the performance of a stem plot. To remove this warning and switch to the new behaviour, set the "use_line_collection" keyword argument to True.
  after removing the cwd from sys.path.

2020-05-26 11:28:57,007 [7350] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-26 11:28:57,025 [7350] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-26 11:28:57,025 [7350] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-26 11:28:57,028 [7350] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-26 11:28:57,028 [7350] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-26 11:28:57,029 [7350] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-26 11:29:11,644 [7355] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-26 11:29:11,644 [7355] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-26 11:29:11,644 [7355] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-26 11:29:11,646 [7355] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-26 11:29:11,646 [7355] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-26 11:29:11,647 [7355] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-26 12:45:13,088 [9254] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-26 12:45:13,130 [9254] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-26 12:45:13,130 [9254] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-26 12:45:13,133 [9254] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-26 12:45:13,134 [9254] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-26 12:45:13,134 [9254] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-26 12:45:13,642 [9254] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-26 12:45:13,643 [9254] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-26 12:45:13,643 [9254] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-26 12:45:13,646 [9254] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-26 12:45:13,647 [9254] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-26 12:45:13,647 [9254] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-26 12:48:04,527 [9254] DEBUG    matplotlib:276: [JupyterRequire] $HOME=/home/juan
2020-05-26 12:48:04,543 [9254] DEBUG    matplotlib:276: [JupyterRequire] CONFIGDIR=/home/juan/.config/matplotlib
2020-05-26 12:48:04,552 [9254] DEBUG    matplotlib:276: [JupyterRequire] matplotlib data path: /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data
2020-05-26 12:48:04,578 [9254] DEBUG    matplotlib:1007: [JupyterRequire] loaded rc file /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-05-26 12:48:04,584 [9254] DEBUG    matplotlib:1644: [JupyterRequire] matplotlib version 3.1.3
2020-05-26 12:48:04,585 [9254] DEBUG    matplotlib:1645: [JupyterRequire] interactive is False
2020-05-26 12:48:04,585 [9254] DEBUG    matplotlib:1646: [JupyterRequire] platform is linux
2020-05-26 12:48:04,585 [9254] DEBUG    matplotlib:1647: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.cloud', 'google.logging', 'google.iam', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', 'errno', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'gettext', 'ast', '_ast', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'textwrap', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'base64', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'array', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.file_io', 'queue', '_queue', 'jedi.parser_utils', 'jedi.debug', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.evaluate', 'jedi.evaluate.utils', 'jedi.evaluate.imports', 'jedi.evaluate.sys_path', 'jedi.evaluate.cache', 'jedi.evaluate.base_context', 'jedi.common', 'jedi.common.context', 'jedi.evaluate.helpers', 'jedi.common.utils', 'jedi.evaluate.compiled', 'jedi.evaluate.compiled.context', 'jedi.evaluate.filters', 'jedi.evaluate.flow_analysis', 'jedi.evaluate.recursion', 'jedi.evaluate.names', 'jedi.evaluate.lazy_context', 'jedi.evaluate.compiled.access', 'jedi.evaluate.compiled.getattr_static', 'jedi.evaluate.signature', 'jedi.evaluate.analysis', 'jedi.evaluate.gradual', 'jedi.evaluate.gradual.typeshed', 'jedi.evaluate.gradual.stub_context', 'jedi.evaluate.context', 'jedi.evaluate.context.module', 'jedi.evaluate.context.klass', 'jedi.evaluate.arguments', 'jedi.evaluate.context.iterable', 'jedi.evaluate.param', 'jedi.evaluate.docstrings', 'jedi.evaluate.context.function', 'jedi.evaluate.parser_cache', 'jedi.evaluate.context.instance', 'jedi.evaluate.gradual.typing', 'jedi.evaluate.syntax_tree', 'jedi.evaluate.finder', 'jedi.evaluate.gradual.conversion', 'jedi.evaluate.gradual.annotation', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.interpreter', 'jedi.evaluate.compiled.mixed', 'jedi.api.helpers', 'jedi.api.completion', 'jedi.api.environment', 'filecmp', 'jedi.evaluate.compiled.subprocess', 'jedi.evaluate.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.evaluate.usages', 'jedi.evaluate.gradual.utils', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_14', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'distutils', 'distutils.util', 'distutils.errors', 'distutils.dep_util', 'distutils.spawn', 'distutils.debug', 'distutils.log', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'curses', '_curses', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.eventloops', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random._bit_generator', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'matplotlib', 'matplotlib.cbook', 'gzip', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-05-26 12:48:04,662 [9254] DEBUG    matplotlib:276: [JupyterRequire] CACHEDIR=/home/juan/.cache/matplotlib
2020-05-26 12:48:04,672 [9254] DEBUG    matplotlib.font_manager:1360: [JupyterRequire] Using fontManager instance from /home/juan/.cache/matplotlib/fontlist-v310.json
2020-05-26 12:48:05,331 [9254] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-05-26 12:48:05,346 [9254] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-05-26 12:48:06,988 [9254] DEBUG    matplotlib.font_manager:1259: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-05-26 12:48:06,988 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,988 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,988 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:06,989 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:06,990 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,991 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,992 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-05-26 12:48:06,993 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:06,994 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:06,995 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-05-26 12:48:06,996 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,997 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,998 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:06,999 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,000 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,001 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,002 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,003 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,003 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,003 [9254] DEBUG    matplotlib.font_manager:1294: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-05-26 12:48:07,102 [9254] DEBUG    matplotlib.font_manager:1259: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2020-05-26 12:48:07,103 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,103 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,104 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,104 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,104 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,105 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:07,105 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,105 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,106 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-05-26 12:48:07,106 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:07,106 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:07,106 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,107 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2020-05-26 12:48:07,107 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,107 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:07,108 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,108 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,108 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,109 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,109 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:07,109 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,109 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:07,110 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:07,110 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,110 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-05-26 12:48:07,110 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,111 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,111 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,111 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,111 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,112 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:07,112 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:07,112 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,113 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,113 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,113 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:07,113 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2020-05-26 12:48:07,114 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,114 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,114 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:07,115 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,115 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,115 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,115 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,116 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,116 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2020-05-26 12:48:07,116 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,116 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,117 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2020-05-26 12:48:07,117 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,117 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,117 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,118 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2020-05-26 12:48:07,118 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,118 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:07,119 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,119 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,119 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,119 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,119 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,119 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,120 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,120 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,120 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,120 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,120 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,120 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,121 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,121 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,121 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,121 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,121 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,122 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,122 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,122 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,122 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,122 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:07,123 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2020-05-26 12:48:07,123 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-05-26 12:48:07,123 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,123 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,123 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 12:48:07,123 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,123 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,124 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,124 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,124 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,124 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,124 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,124 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,124 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,124 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,125 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,125 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,125 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,125 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,125 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,125 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,125 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,125 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,126 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,126 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,126 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,126 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,126 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2020-05-26 12:48:07,126 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,126 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,126 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,126 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,127 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,127 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2020-05-26 12:48:07,127 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,127 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,127 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,127 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,127 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,127 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:07,128 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,128 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,128 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,128 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,128 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2020-05-26 12:48:07,128 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,128 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:07,128 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:07,128 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,129 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,129 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-05-26 12:48:07,129 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,129 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,129 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,129 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,129 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,129 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2020-05-26 12:48:07,129 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,129 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,130 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,130 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2020-05-26 12:48:07,130 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,130 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,130 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,130 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,130 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,130 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,130 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,130 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 12:48:07,131 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,131 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,131 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,131 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,131 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:07,131 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,131 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,131 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,131 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,131 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,132 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,132 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,132 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,132 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,132 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:07,132 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:07,132 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,132 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,132 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,132 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,133 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,133 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,133 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,133 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,133 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,133 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,133 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,133 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,133 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,133 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 12:48:07,133 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2020-05-26 12:48:07,134 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:07,134 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,134 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2020-05-26 12:48:07,134 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,134 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,134 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,134 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,134 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,134 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,134 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,134 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,134 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2020-05-26 12:48:07,134 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2020-05-26 12:48:07,135 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,135 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,135 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,135 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,135 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 12:48:07,135 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2020-05-26 12:48:07,135 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,135 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,135 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,135 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,135 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,136 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,136 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,136 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,136 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,136 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,136 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2020-05-26 12:48:07,136 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,136 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,136 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2020-05-26 12:48:07,136 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,137 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,137 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,137 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,137 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 12:48:07,137 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 12:48:07,137 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,137 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,137 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,137 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,137 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,137 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,137 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 12:48:07,138 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 12:48:07,138 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,138 [9254] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2020-05-26 12:48:07,138 [9254] DEBUG    matplotlib.font_manager:1294: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-05-26 12:48:26,694 [9254] DEBUG    matplotlib.colorbar:560: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efeb998a210>
2020-05-26 12:48:26,694 [9254] DEBUG    matplotlib.colorbar:608: [JupyterRequire] Using auto colorbar locator on colorbar
2020-05-26 12:48:26,694 [9254] DEBUG    matplotlib.colorbar:609: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7efeb998a210>
2020-05-26 12:48:26,694 [9254] DEBUG    matplotlib.colorbar:780: [JupyterRequire] Setting pcolormesh
2020-05-26 13:03:55,779 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_modulation.py
2020-05-26 13:03:56,030 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2020-05-26 13:03:56,063 [9254] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-26 13:03:56,063 [9254] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 1
2020-05-26 13:03:56,063 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2020-05-26 13:03:56,064 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2020-05-26 13:03:56,064 [9254] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-26 13:08:43,850 [9254] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-26 13:08:43,850 [9254] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 1; new: 56
2020-05-26 13:08:43,850 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:56]
2020-05-26 13:08:43,879 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 56 (to 55 in part parser)
2020-05-26 13:08:43,880 [9254] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-26 13:08:43,953 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/__init__.py
2020-05-26 13:08:44,004 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_algebra.py
2020-05-26 13:08:44,033 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_channels.py
2020-05-26 13:08:44,086 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_error_control_block.py
2020-05-26 13:08:44,096 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_error_control_convolutional.py
2020-05-26 13:08:44,101 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_finite_state_machine.py
2020-05-26 13:08:44,128 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_pulses.py
2020-05-26 13:08:44,131 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_quantization.py
2020-05-26 13:08:44,136 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_sequences.py
2020-05-26 13:08:44,140 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_source_coding.py
2020-05-26 13:08:44,151 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_sources.py
2020-05-26 13:08:44,156 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_util.py
2020-05-26 13:08:44,290 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/scipy/__init__.py
2020-05-26 13:08:44,398 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/scipy/special/__init__.py
2020-05-26 13:08:44,538 [9254] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-26 13:08:44,539 [9254] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 56; new: 56
2020-05-26 13:08:44,539 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:55] new[1:55]
2020-05-26 13:08:44,539 [9254] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:53] new[1:53]
2020-05-26 13:08:44,540 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 54 to 56 (to 55 in part parser)
2020-05-26 13:08:44,540 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[56:56] new[56:56]
2020-05-26 13:08:44,540 [9254] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-26 13:08:48,083 [9254] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-26 13:08:48,084 [9254] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 56; new: 56
2020-05-26 13:08:48,084 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:55] new[1:55]
2020-05-26 13:08:48,085 [9254] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:53] new[1:53]
2020-05-26 13:08:48,088 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 54 to 56 (to 55 in part parser)
2020-05-26 13:08:48,088 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[56:56] new[56:56]
2020-05-26 13:08:48,088 [9254] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-26 13:36:27,991 [9254] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-26 13:36:27,992 [9254] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 56; new: 73
2020-05-26 13:36:27,992 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:7] new[1:7]
2020-05-26 13:36:27,993 [9254] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:6] new[1:6]
2020-05-26 13:36:27,996 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 7 to 9 (to 9 in part parser)
2020-05-26 13:36:27,996 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[8:8] new[8:8]
2020-05-26 13:36:27,997 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[9:15] new[9:15]
2020-05-26 13:36:27,997 [9254] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[11:15] new[10:15]
2020-05-26 13:36:27,997 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[16:17] new[16:17]
2020-05-26 13:36:28,006 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 16 to 32 (to 32 in part parser)
2020-05-26 13:36:28,006 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[18:18] new[18:18]
2020-05-26 13:36:28,007 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[19:21] new[19:31]
2020-05-26 13:36:28,007 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[22:44] new[32:54]
2020-05-26 13:36:28,009 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 33 to 34 (to 34 in part parser)
2020-05-26 13:36:28,010 [9254] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[25:29] new[35:39]
2020-05-26 13:36:28,010 [9254] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[31:53] new[40:54]
2020-05-26 13:36:28,011 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[45:46] new[55:55]
2020-05-26 13:36:28,012 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 55 to 55 (to 55 in part parser)
2020-05-26 13:36:28,012 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[47:47] new[56:56]
2020-05-26 13:36:28,130 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 56 to 61 (to 61 in part parser)
2020-05-26 13:36:28,131 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[48:48] new[57:58]
2020-05-26 13:36:28,131 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[49:49] new[59:59]
2020-05-26 13:36:28,131 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[insert] old[50:49] new[60:60]
2020-05-26 13:36:28,131 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[50:55] new[61:66]
2020-05-26 13:36:28,131 [9254] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[52:53] new[62:64]
2020-05-26 13:36:28,133 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 65 to 67 (to 67 in part parser)
2020-05-26 13:36:28,133 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[56:56] new[67:73]
2020-05-26 13:36:28,135 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 68 to 73 (to 72 in part parser)
2020-05-26 13:36:28,135 [9254] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-26 13:36:28,503 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/__init__.py
2020-05-26 13:36:28,594 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/pyplot.py
2020-05-26 13:36:28,680 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/docstring.py
2020-05-26 13:36:29,034 [9254] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-26 13:36:29,035 [9254] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 73; new: 73
2020-05-26 13:36:29,035 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:72] new[1:72]
2020-05-26 13:36:29,035 [9254] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:72] new[1:72]
2020-05-26 13:36:29,035 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[73:73] new[73:73]
2020-05-26 13:36:29,036 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 73 to 73 (to 72 in part parser)
2020-05-26 13:36:29,036 [9254] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-26 13:37:04,705 [9254] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-26 13:37:04,706 [9254] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 73; new: 73
2020-05-26 13:37:04,706 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:72] new[1:72]
2020-05-26 13:37:04,707 [9254] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:72] new[1:72]
2020-05-26 13:37:04,707 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[73:73] new[73:73]
2020-05-26 13:37:04,708 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 73 to 73 (to 72 in part parser)
2020-05-26 13:37:04,709 [9254] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-26 13:37:04,875 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/figure.py
2020-05-26 13:37:08,355 [9254] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-26 13:37:08,356 [9254] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 73; new: 73
2020-05-26 13:37:08,356 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:72] new[1:72]
2020-05-26 13:37:08,357 [9254] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:72] new[1:72]
2020-05-26 13:37:08,357 [9254] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[73:73] new[73:73]
2020-05-26 13:37:08,359 [9254] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 73 to 73 (to 72 in part parser)
2020-05-26 13:37:08,359 [9254] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-26 13:37:08,487 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2020-05-26 13:37:08,615 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/typing.py
2020-05-26 13:37:08,658 [9254] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/3/typing.pyi
2020-05-26 13:42:07,031 [9894] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-26 13:42:07,032 [9894] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-26 13:42:07,032 [9894] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-26 13:42:07,037 [9894] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-26 13:42:07,038 [9894] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-26 13:42:07,038 [9894] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-26 13:42:09,364 [9894] DEBUG    matplotlib:276: [JupyterRequire] $HOME=/home/juan
2020-05-26 13:42:09,365 [9894] DEBUG    matplotlib:276: [JupyterRequire] CONFIGDIR=/home/juan/.config/matplotlib
2020-05-26 13:42:09,365 [9894] DEBUG    matplotlib:276: [JupyterRequire] matplotlib data path: /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data
2020-05-26 13:42:09,392 [9894] DEBUG    matplotlib:1007: [JupyterRequire] loaded rc file /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-05-26 13:42:09,398 [9894] DEBUG    matplotlib:1644: [JupyterRequire] matplotlib version 3.1.3
2020-05-26 13:42:09,398 [9894] DEBUG    matplotlib:1645: [JupyterRequire] interactive is False
2020-05-26 13:42:09,399 [9894] DEBUG    matplotlib:1646: [JupyterRequire] platform is linux
2020-05-26 13:42:09,400 [9894] DEBUG    matplotlib:1647: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.cloud', 'google.logging', 'google.iam', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', 'errno', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'gettext', 'ast', '_ast', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'textwrap', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'base64', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'array', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.file_io', 'queue', '_queue', 'jedi.parser_utils', 'jedi.debug', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.evaluate', 'jedi.evaluate.utils', 'jedi.evaluate.imports', 'jedi.evaluate.sys_path', 'jedi.evaluate.cache', 'jedi.evaluate.base_context', 'jedi.common', 'jedi.common.context', 'jedi.evaluate.helpers', 'jedi.common.utils', 'jedi.evaluate.compiled', 'jedi.evaluate.compiled.context', 'jedi.evaluate.filters', 'jedi.evaluate.flow_analysis', 'jedi.evaluate.recursion', 'jedi.evaluate.names', 'jedi.evaluate.lazy_context', 'jedi.evaluate.compiled.access', 'jedi.evaluate.compiled.getattr_static', 'jedi.evaluate.signature', 'jedi.evaluate.analysis', 'jedi.evaluate.gradual', 'jedi.evaluate.gradual.typeshed', 'jedi.evaluate.gradual.stub_context', 'jedi.evaluate.context', 'jedi.evaluate.context.module', 'jedi.evaluate.context.klass', 'jedi.evaluate.arguments', 'jedi.evaluate.context.iterable', 'jedi.evaluate.param', 'jedi.evaluate.docstrings', 'jedi.evaluate.context.function', 'jedi.evaluate.parser_cache', 'jedi.evaluate.context.instance', 'jedi.evaluate.gradual.typing', 'jedi.evaluate.syntax_tree', 'jedi.evaluate.finder', 'jedi.evaluate.gradual.conversion', 'jedi.evaluate.gradual.annotation', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.interpreter', 'jedi.evaluate.compiled.mixed', 'jedi.api.helpers', 'jedi.api.completion', 'jedi.api.environment', 'filecmp', 'jedi.evaluate.compiled.subprocess', 'jedi.evaluate.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.evaluate.usages', 'jedi.evaluate.gradual.utils', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_14', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'distutils', 'distutils.util', 'distutils.errors', 'distutils.dep_util', 'distutils.spawn', 'distutils.debug', 'distutils.log', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'curses', '_curses', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.eventloops', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random._bit_generator', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'matplotlib', 'matplotlib.cbook', 'gzip', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-05-26 13:42:09,466 [9894] DEBUG    matplotlib:276: [JupyterRequire] CACHEDIR=/home/juan/.cache/matplotlib
2020-05-26 13:42:09,485 [9894] DEBUG    matplotlib.font_manager:1360: [JupyterRequire] Using fontManager instance from /home/juan/.cache/matplotlib/fontlist-v310.json
2020-05-26 13:42:09,931 [9894] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-05-26 13:42:09,943 [9894] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-05-26 13:42:14,369 [9894] DEBUG    matplotlib.font_manager:1259: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-05-26 13:42:14,369 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,369 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,369 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,369 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,369 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,370 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,371 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,372 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,373 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 13:42:14,374 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,375 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,376 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,377 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,378 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,378 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,378 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,378 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2020-05-26 13:42:14,378 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,378 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,378 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,378 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,378 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,378 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,378 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,379 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,380 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,381 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,382 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,383 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,384 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,384 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,384 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,384 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,384 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,384 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,384 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,384 [9894] DEBUG    matplotlib.font_manager:1294: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-05-26 13:42:14,403 [9894] DEBUG    matplotlib.font_manager:1259: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2020-05-26 13:42:14,404 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,404 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,404 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,404 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,404 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,404 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,404 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,404 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,404 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-05-26 13:42:14,404 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,404 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,404 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,404 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,405 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,406 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,407 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,408 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,409 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,410 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,411 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,412 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,412 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2020-05-26 13:42:14,412 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,412 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,412 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,412 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,412 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,412 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-05-26 13:42:14,412 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,412 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,413 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,414 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2020-05-26 13:42:14,415 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,416 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,417 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:42:14,418 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,419 [9894] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:42:14,419 [9894] DEBUG    matplotlib.font_manager:1294: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-05-26 13:44:46,148 [9922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-26 13:44:46,148 [9922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-26 13:44:46,148 [9922] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-26 13:44:46,150 [9922] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-26 13:44:46,151 [9922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-26 13:44:46,151 [9922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-26 13:44:46,676 [9922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-26 13:44:46,676 [9922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-26 13:44:46,676 [9922] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-26 13:44:46,684 [9922] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-26 13:44:46,685 [9922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-26 13:44:46,685 [9922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-26 13:44:56,251 [9922] DEBUG    matplotlib:276: [JupyterRequire] $HOME=/home/juan
2020-05-26 13:44:56,252 [9922] DEBUG    matplotlib:276: [JupyterRequire] CONFIGDIR=/home/juan/.config/matplotlib
2020-05-26 13:44:56,252 [9922] DEBUG    matplotlib:276: [JupyterRequire] matplotlib data path: /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data
2020-05-26 13:44:56,254 [9922] DEBUG    matplotlib:1007: [JupyterRequire] loaded rc file /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-05-26 13:44:56,256 [9922] DEBUG    matplotlib:1644: [JupyterRequire] matplotlib version 3.1.3
2020-05-26 13:44:56,256 [9922] DEBUG    matplotlib:1645: [JupyterRequire] interactive is False
2020-05-26 13:44:56,256 [9922] DEBUG    matplotlib:1646: [JupyterRequire] platform is linux
2020-05-26 13:44:56,256 [9922] DEBUG    matplotlib:1647: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.cloud', 'google.logging', 'google.iam', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', 'errno', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'gettext', 'ast', '_ast', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'textwrap', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'base64', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'array', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.file_io', 'queue', '_queue', 'jedi.parser_utils', 'jedi.debug', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.evaluate', 'jedi.evaluate.utils', 'jedi.evaluate.imports', 'jedi.evaluate.sys_path', 'jedi.evaluate.cache', 'jedi.evaluate.base_context', 'jedi.common', 'jedi.common.context', 'jedi.evaluate.helpers', 'jedi.common.utils', 'jedi.evaluate.compiled', 'jedi.evaluate.compiled.context', 'jedi.evaluate.filters', 'jedi.evaluate.flow_analysis', 'jedi.evaluate.recursion', 'jedi.evaluate.names', 'jedi.evaluate.lazy_context', 'jedi.evaluate.compiled.access', 'jedi.evaluate.compiled.getattr_static', 'jedi.evaluate.signature', 'jedi.evaluate.analysis', 'jedi.evaluate.gradual', 'jedi.evaluate.gradual.typeshed', 'jedi.evaluate.gradual.stub_context', 'jedi.evaluate.context', 'jedi.evaluate.context.module', 'jedi.evaluate.context.klass', 'jedi.evaluate.arguments', 'jedi.evaluate.context.iterable', 'jedi.evaluate.param', 'jedi.evaluate.docstrings', 'jedi.evaluate.context.function', 'jedi.evaluate.parser_cache', 'jedi.evaluate.context.instance', 'jedi.evaluate.gradual.typing', 'jedi.evaluate.syntax_tree', 'jedi.evaluate.finder', 'jedi.evaluate.gradual.conversion', 'jedi.evaluate.gradual.annotation', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.interpreter', 'jedi.evaluate.compiled.mixed', 'jedi.api.helpers', 'jedi.api.completion', 'jedi.api.environment', 'filecmp', 'jedi.evaluate.compiled.subprocess', 'jedi.evaluate.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.evaluate.usages', 'jedi.evaluate.gradual.utils', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_14', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'distutils', 'distutils.util', 'distutils.errors', 'distutils.dep_util', 'distutils.spawn', 'distutils.debug', 'distutils.log', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'curses', '_curses', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.eventloops', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random._bit_generator', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'matplotlib', 'matplotlib.cbook', 'gzip', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-05-26 13:44:56,290 [9922] DEBUG    matplotlib:276: [JupyterRequire] CACHEDIR=/home/juan/.cache/matplotlib
2020-05-26 13:44:56,292 [9922] DEBUG    matplotlib.font_manager:1360: [JupyterRequire] Using fontManager instance from /home/juan/.cache/matplotlib/fontlist-v310.json
2020-05-26 13:44:56,399 [9922] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-05-26 13:44:56,405 [9922] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-05-26 13:44:56,882 [9922] DEBUG    matplotlib.font_manager:1259: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-05-26 13:44:56,882 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,882 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,882 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,882 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,882 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,882 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,882 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,882 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,882 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-05-26 13:44:56,882 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,882 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,883 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,884 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,885 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2020-05-26 13:44:56,886 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,887 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,888 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,889 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,890 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,891 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,892 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,893 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,894 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,895 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,895 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,895 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,895 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,895 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,895 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,895 [9922] DEBUG    matplotlib.font_manager:1294: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-05-26 13:44:56,898 [9922] DEBUG    matplotlib.font_manager:1259: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,899 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,900 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,901 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,902 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,903 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,904 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,905 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,906 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,907 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 13:44:56,908 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,909 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,910 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2020-05-26 13:44:56,911 [9922] DEBUG    matplotlib.font_manager:1294: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-05-26 13:45:38,759 [9922] DEBUG    matplotlib.colorbar:560: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f53904dad50>
2020-05-26 13:45:38,759 [9922] DEBUG    matplotlib.colorbar:608: [JupyterRequire] Using auto colorbar locator on colorbar
2020-05-26 13:45:38,759 [9922] DEBUG    matplotlib.colorbar:609: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f53904dad50>
2020-05-26 13:45:38,759 [9922] DEBUG    matplotlib.colorbar:780: [JupyterRequire] Setting pcolormesh
2020-05-26 13:55:54,913 [9922] WARNING  py.warnings:110: [JupyterRequire] /home/juan/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:77: RuntimeWarning: invalid value encountered in true_divide

2020-05-26 13:56:56,463 [9922] WARNING  py.warnings:110: [JupyterRequire] /home/juan/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:74: RuntimeWarning: invalid value encountered in true_divide

2020-05-26 14:03:30,159 [10069] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-26 14:03:30,159 [10069] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-26 14:03:30,159 [10069] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-26 14:03:30,161 [10069] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-26 14:03:30,161 [10069] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-26 14:03:30,162 [10069] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-26 14:03:30,681 [10069] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-26 14:03:30,681 [10069] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-26 14:03:30,682 [10069] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-26 14:03:30,688 [10069] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-26 14:03:30,689 [10069] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-26 14:03:30,690 [10069] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-26 14:03:37,085 [10069] DEBUG    matplotlib:276: [JupyterRequire] $HOME=/home/juan
2020-05-26 14:03:37,085 [10069] DEBUG    matplotlib:276: [JupyterRequire] CONFIGDIR=/home/juan/.config/matplotlib
2020-05-26 14:03:37,085 [10069] DEBUG    matplotlib:276: [JupyterRequire] matplotlib data path: /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data
2020-05-26 14:03:37,088 [10069] DEBUG    matplotlib:1007: [JupyterRequire] loaded rc file /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-05-26 14:03:37,089 [10069] DEBUG    matplotlib:1644: [JupyterRequire] matplotlib version 3.1.3
2020-05-26 14:03:37,089 [10069] DEBUG    matplotlib:1645: [JupyterRequire] interactive is False
2020-05-26 14:03:37,089 [10069] DEBUG    matplotlib:1646: [JupyterRequire] platform is linux
2020-05-26 14:03:37,089 [10069] DEBUG    matplotlib:1647: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.cloud', 'google.logging', 'google.iam', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', 'errno', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'gettext', 'ast', '_ast', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'textwrap', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'base64', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'array', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.file_io', 'queue', '_queue', 'jedi.parser_utils', 'jedi.debug', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.evaluate', 'jedi.evaluate.utils', 'jedi.evaluate.imports', 'jedi.evaluate.sys_path', 'jedi.evaluate.cache', 'jedi.evaluate.base_context', 'jedi.common', 'jedi.common.context', 'jedi.evaluate.helpers', 'jedi.common.utils', 'jedi.evaluate.compiled', 'jedi.evaluate.compiled.context', 'jedi.evaluate.filters', 'jedi.evaluate.flow_analysis', 'jedi.evaluate.recursion', 'jedi.evaluate.names', 'jedi.evaluate.lazy_context', 'jedi.evaluate.compiled.access', 'jedi.evaluate.compiled.getattr_static', 'jedi.evaluate.signature', 'jedi.evaluate.analysis', 'jedi.evaluate.gradual', 'jedi.evaluate.gradual.typeshed', 'jedi.evaluate.gradual.stub_context', 'jedi.evaluate.context', 'jedi.evaluate.context.module', 'jedi.evaluate.context.klass', 'jedi.evaluate.arguments', 'jedi.evaluate.context.iterable', 'jedi.evaluate.param', 'jedi.evaluate.docstrings', 'jedi.evaluate.context.function', 'jedi.evaluate.parser_cache', 'jedi.evaluate.context.instance', 'jedi.evaluate.gradual.typing', 'jedi.evaluate.syntax_tree', 'jedi.evaluate.finder', 'jedi.evaluate.gradual.conversion', 'jedi.evaluate.gradual.annotation', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.interpreter', 'jedi.evaluate.compiled.mixed', 'jedi.api.helpers', 'jedi.api.completion', 'jedi.api.environment', 'filecmp', 'jedi.evaluate.compiled.subprocess', 'jedi.evaluate.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.evaluate.usages', 'jedi.evaluate.gradual.utils', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_14', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'distutils', 'distutils.util', 'distutils.errors', 'distutils.dep_util', 'distutils.spawn', 'distutils.debug', 'distutils.log', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'curses', '_curses', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.eventloops', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random._bit_generator', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'matplotlib', 'matplotlib.cbook', 'gzip', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-05-26 14:03:37,125 [10069] DEBUG    matplotlib:276: [JupyterRequire] CACHEDIR=/home/juan/.cache/matplotlib
2020-05-26 14:03:37,126 [10069] DEBUG    matplotlib.font_manager:1360: [JupyterRequire] Using fontManager instance from /home/juan/.cache/matplotlib/fontlist-v310.json
2020-05-26 14:03:37,235 [10069] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-05-26 14:03:37,241 [10069] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-05-26 14:03:38,720 [10069] DEBUG    matplotlib.font_manager:1259: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-05-26 14:03:38,720 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,720 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,720 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,720 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,720 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,720 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,720 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,720 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,720 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-05-26 14:03:38,720 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,721 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,722 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,723 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,724 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,725 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,726 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,727 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,728 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,729 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,730 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,731 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,732 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,733 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,733 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,733 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,733 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,733 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,733 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,733 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,733 [10069] DEBUG    matplotlib.font_manager:1294: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-05-26 14:03:38,736 [10069] DEBUG    matplotlib.font_manager:1259: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,737 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,738 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,739 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,740 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,741 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,742 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2020-05-26 14:03:38,743 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,744 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,745 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 14:03:38,746 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 14:03:38,747 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,748 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,749 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 14:03:38,749 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 14:03:38,749 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,749 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,749 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,749 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,749 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,749 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,749 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 14:03:38,749 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 14:03:38,749 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,749 [10069] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2020-05-26 14:03:38,749 [10069] DEBUG    matplotlib.font_manager:1294: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-05-26 14:03:44,581 [10069] DEBUG    matplotlib.colorbar:560: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f975477a890>
2020-05-26 14:03:44,582 [10069] DEBUG    matplotlib.colorbar:608: [JupyterRequire] Using auto colorbar locator on colorbar
2020-05-26 14:03:44,582 [10069] DEBUG    matplotlib.colorbar:609: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f975477a890>
2020-05-26 14:03:44,582 [10069] DEBUG    matplotlib.colorbar:780: [JupyterRequire] Setting pcolormesh
2020-05-26 14:05:39,841 [10069] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi
2020-05-26 14:05:39,878 [10069] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/3/sys.pyi
2020-05-26 14:05:39,950 [10069] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/komm/_modulation.py
2020-05-26 14:05:40,203 [10069] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-26 14:05:40,204 [10069] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 13; new: 13
2020-05-26 14:05:40,204 [10069] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:12] new[1:12]
2020-05-26 14:05:40,205 [10069] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:10] new[1:10]
2020-05-26 14:05:40,206 [10069] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 11 to 13 (to 12 in part parser)
2020-05-26 14:05:40,206 [10069] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[13:13] new[13:13]
2020-05-26 14:05:40,207 [10069] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-26 14:07:59,883 [10069] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-26 14:07:59,884 [10069] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 13; new: 47
2020-05-26 14:07:59,884 [10069] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2020-05-26 14:07:59,886 [10069] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 1 (to 1 in part parser)
2020-05-26 14:07:59,886 [10069] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[2:12] new[2:12]
2020-05-26 14:07:59,887 [10069] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[2:10] new[2:10]
2020-05-26 14:07:59,889 [10069] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 11 to 13 (to 13 in part parser)
2020-05-26 14:07:59,890 [10069] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[13:13] new[13:47]
2020-05-26 14:07:59,914 [10069] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 14 to 47 (to 46 in part parser)
2020-05-26 14:07:59,915 [10069] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-26 17:34:02,470 [10069] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-26 17:34:02,498 [10069] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 47; new: 3
2020-05-26 17:34:02,498 [10069] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[1:47] new[1:3]
2020-05-26 17:34:02,501 [10069] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 1 to 3 (to 2 in part parser)
2020-05-26 17:34:02,501 [10069] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-26 17:34:02,602 [10069] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/__init__.py
2020-05-26 17:34:02,789 [10069] DEBUG    parso.cache:126: [JupyterRequire] pickle loaded: /home/juan/anaconda3/lib/python3.7/site-packages/numpy/core/numeric.py
2020-05-26 17:34:03,508 [10069] DEBUG    parso.python.diff:213: [JupyterRequire] diff parser start
2020-05-26 17:34:03,509 [10069] DEBUG    parso.python.diff:224: [JupyterRequire] line_lengths old: 3; new: 3
2020-05-26 17:34:03,509 [10069] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2020-05-26 17:34:03,510 [10069] DEBUG    parso.python.diff:299: [JupyterRequire] copy old[1:2] new[1:2]
2020-05-26 17:34:03,510 [10069] DEBUG    parso.python.diff:228: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2020-05-26 17:34:03,511 [10069] DEBUG    parso.python.diff:341: [JupyterRequire] parse_part from 3 to 3 (to 2 in part parser)
2020-05-26 17:34:03,512 [10069] DEBUG    parso.python.diff:264: [JupyterRequire] diff parser end
2020-05-26 17:51:20,650 [12649] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-26 17:51:20,650 [12649] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-26 17:51:20,650 [12649] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-26 17:51:20,652 [12649] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-26 17:51:20,653 [12649] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-26 17:51:20,653 [12649] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-26 17:51:21,174 [12649] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2020-05-26 17:51:21,174 [12649] DEBUG    root:93: [JupyterRequire] Initializing comms.
2020-05-26 17:51:21,175 [12649] INFO     root:247: [JupyterRequire] Initializing comms.
2020-05-26 17:51:21,182 [12649] DEBUG    root:197: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2020-05-26 17:51:21,183 [12649] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2020-05-26 17:51:21,183 [12649] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2020-05-26 17:51:26,579 [12649] DEBUG    matplotlib:276: [JupyterRequire] $HOME=/home/juan
2020-05-26 17:51:26,580 [12649] DEBUG    matplotlib:276: [JupyterRequire] CONFIGDIR=/home/juan/.config/matplotlib
2020-05-26 17:51:26,590 [12649] DEBUG    matplotlib:276: [JupyterRequire] matplotlib data path: /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data
2020-05-26 17:51:26,619 [12649] DEBUG    matplotlib:1007: [JupyterRequire] loaded rc file /home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
2020-05-26 17:51:26,627 [12649] DEBUG    matplotlib:1644: [JupyterRequire] matplotlib version 3.1.3
2020-05-26 17:51:26,627 [12649] DEBUG    matplotlib:1645: [JupyterRequire] interactive is False
2020-05-26 17:51:26,628 [12649] DEBUG    matplotlib:1646: [JupyterRequire] platform is linux
2020-05-26 17:51:26,628 [12649] DEBUG    matplotlib:1647: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', 'zipimport', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_abc', '_bootlocale', '_locale', 'site', 'os', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'types', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'functools', '_functools', 'google', 'google.cloud', 'google.logging', 'google.iam', 'mpl_toolkits', 'sphinxcontrib', 'runpy', 'pkgutil', 'weakref', '_weakrefset', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', 'errno', '_posixsubprocess', 'select', 'selectors', 'collections.abc', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'gettext', 'ast', '_ast', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'textwrap', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'socket', '_socket', 'ssl', '_ssl', 'base64', 'asyncio.constants', 'asyncio.coroutines', 'asyncio.base_futures', 'asyncio.format_helpers', 'asyncio.log', 'asyncio.events', 'contextvars', '_contextvars', 'asyncio.base_tasks', '_asyncio', 'asyncio.futures', 'asyncio.protocols', 'asyncio.sslproto', 'asyncio.transports', 'asyncio.tasks', 'asyncio.locks', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'array', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.file_io', 'queue', '_queue', 'jedi.parser_utils', 'jedi.debug', 'colorama', 'colorama.initialise', 'colorama.ansitowin32', 'colorama.ansi', 'colorama.winterm', 'colorama.win32', 'ctypes', '_ctypes', 'ctypes._endian', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.evaluate', 'jedi.evaluate.utils', 'jedi.evaluate.imports', 'jedi.evaluate.sys_path', 'jedi.evaluate.cache', 'jedi.evaluate.base_context', 'jedi.common', 'jedi.common.context', 'jedi.evaluate.helpers', 'jedi.common.utils', 'jedi.evaluate.compiled', 'jedi.evaluate.compiled.context', 'jedi.evaluate.filters', 'jedi.evaluate.flow_analysis', 'jedi.evaluate.recursion', 'jedi.evaluate.names', 'jedi.evaluate.lazy_context', 'jedi.evaluate.compiled.access', 'jedi.evaluate.compiled.getattr_static', 'jedi.evaluate.signature', 'jedi.evaluate.analysis', 'jedi.evaluate.gradual', 'jedi.evaluate.gradual.typeshed', 'jedi.evaluate.gradual.stub_context', 'jedi.evaluate.context', 'jedi.evaluate.context.module', 'jedi.evaluate.context.klass', 'jedi.evaluate.arguments', 'jedi.evaluate.context.iterable', 'jedi.evaluate.param', 'jedi.evaluate.docstrings', 'jedi.evaluate.context.function', 'jedi.evaluate.parser_cache', 'jedi.evaluate.context.instance', 'jedi.evaluate.gradual.typing', 'jedi.evaluate.syntax_tree', 'jedi.evaluate.finder', 'jedi.evaluate.gradual.conversion', 'jedi.evaluate.gradual.annotation', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.interpreter', 'jedi.evaluate.compiled.mixed', 'jedi.api.helpers', 'jedi.api.completion', 'jedi.api.environment', 'filecmp', 'jedi.evaluate.compiled.subprocess', 'jedi.evaluate.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.evaluate.usages', 'jedi.evaluate.gradual.utils', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_14', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'distutils', 'distutils.util', 'distutils.errors', 'distutils.dep_util', 'distutils.spawn', 'distutils.debug', 'distutils.log', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'numbers', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'curses', '_curses', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'decimal', '_decimal', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.eventloops', 'distutils.version', 'ipykernel.parentpoller', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'jupyter_require', 'daiquiri', 'logging.config', 'socketserver', 'daiquiri.output', 'syslog', 'daiquiri.formatter', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.handlers', 'jupyter_require.__about__', 'jupyter_require.notebook', 'csscompressor', 'jupyter_require.core', 'jupyter_require.magic', 'jupyter_nbutils', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'mkl', 'mkl._mklinit', 'mkl._py_mkl_service', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random._bit_generator', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'matplotlib', 'matplotlib.cbook', 'gzip', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2020-05-26 17:51:26,720 [12649] DEBUG    matplotlib:276: [JupyterRequire] CACHEDIR=/home/juan/.cache/matplotlib
2020-05-26 17:51:26,747 [12649] DEBUG    matplotlib.font_manager:1360: [JupyterRequire] Using fontManager instance from /home/juan/.cache/matplotlib/fontlist-v310.json
2020-05-26 17:51:27,238 [12649] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-05-26 17:51:27,255 [12649] DEBUG    matplotlib.pyplot:225: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2020-05-26 17:51:28,433 [12649] DEBUG    matplotlib.font_manager:1259: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,434 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,435 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,436 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,437 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,438 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,439 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,440 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,441 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,442 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,443 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,444 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,445 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,446 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,447 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,447 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,447 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,447 [12649] DEBUG    matplotlib.font_manager:1294: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-05-26 17:51:28,513 [12649] DEBUG    matplotlib.font_manager:1259: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2020-05-26 17:51:28,514 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,514 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,514 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,515 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,515 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,515 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,515 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,515 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,516 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2020-05-26 17:51:28,516 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,516 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,516 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,517 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
2020-05-26 17:51:28,517 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,517 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,517 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,518 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,518 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,518 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,518 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,518 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,519 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,519 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,519 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,519 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2020-05-26 17:51:28,520 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,520 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,520 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,520 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,521 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,521 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,521 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,521 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,522 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,522 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,522 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,522 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
2020-05-26 17:51:28,523 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,523 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,523 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,523 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,523 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,524 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,524 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,524 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,524 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
2020-05-26 17:51:28,525 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,525 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,525 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
2020-05-26 17:51:28,525 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,526 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,526 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,526 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
2020-05-26 17:51:28,526 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,526 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,527 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,527 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,527 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,527 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,528 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,528 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,528 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,528 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,528 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,528 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,529 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,529 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,529 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,529 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,529 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,529 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,529 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,530 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,530 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,530 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,530 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,530 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,530 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2020-05-26 17:51:28,530 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2020-05-26 17:51:28,531 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,531 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,531 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 17:51:28,531 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,531 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,531 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,531 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,532 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,532 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,532 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,532 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,532 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,532 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,533 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,533 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,533 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,533 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,533 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,533 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,533 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,533 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,534 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,534 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,534 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,534 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,534 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
2020-05-26 17:51:28,534 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,534 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,534 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,534 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,535 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,535 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
2020-05-26 17:51:28,535 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,535 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,535 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,535 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,535 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,535 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,535 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,536 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,536 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,536 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,536 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
2020-05-26 17:51:28,536 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,536 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,536 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,536 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,536 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,537 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
2020-05-26 17:51:28,537 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,537 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,537 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,537 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,537 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,537 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
2020-05-26 17:51:28,537 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,537 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,538 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,538 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,538 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,538 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,538 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,538 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,538 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,538 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,538 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,538 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2020-05-26 17:51:28,539 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,539 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,539 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,539 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,539 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,539 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,539 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,539 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,539 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,539 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,539 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,539 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,540 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,540 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,540 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,540 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,540 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,540 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,540 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,540 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,540 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,540 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,540 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,541 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,541 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,541 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,541 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,541 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,541 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,541 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2020-05-26 17:51:28,541 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
2020-05-26 17:51:28,541 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,541 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,541 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
2020-05-26 17:51:28,542 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,542 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,542 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,542 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,542 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,542 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,542 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,542 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,542 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
2020-05-26 17:51:28,542 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
2020-05-26 17:51:28,542 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,543 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,543 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,543 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,543 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
2020-05-26 17:51:28,543 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
2020-05-26 17:51:28,543 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,543 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,543 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,543 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,543 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,543 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,543 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,543 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,544 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,544 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,544 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
2020-05-26 17:51:28,544 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,544 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,544 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
2020-05-26 17:51:28,544 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,544 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,544 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,544 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,544 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2020-05-26 17:51:28,544 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05
2020-05-26 17:51:28,544 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,545 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,545 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,545 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,545 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,545 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,545 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
2020-05-26 17:51:28,545 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
2020-05-26 17:51:28,545 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,545 [12649] DEBUG    matplotlib.font_manager:1271: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2020-05-26 17:51:28,545 [12649] DEBUG    matplotlib.font_manager:1294: [JupyterRequire] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/juan/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2020-05-26 17:51:30,418 [12649] DEBUG    matplotlib.colorbar:560: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f8705dc3110>
2020-05-26 17:51:30,419 [12649] DEBUG    matplotlib.colorbar:608: [JupyterRequire] Using auto colorbar locator on colorbar
2020-05-26 17:51:30,419 [12649] DEBUG    matplotlib.colorbar:609: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x7f8705dc3110>
2020-05-26 17:51:30,419 [12649] DEBUG    matplotlib.colorbar:780: [JupyterRequire] Setting pcolormesh
